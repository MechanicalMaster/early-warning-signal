This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
~/
  .zprofile
  .zshrc
app/
  (dashboard)/
    anchor-master/
      [id]/
        page.tsx
      loading.tsx
      page.tsx
    configuration/
      page.tsx
    dashboard/
      page.tsx
    data-sync/
      page.tsx
    dealer-master/
      loading.tsx
      page.tsx
    dealer-status/
      loading.tsx
      page.tsx
    fldg-view/
      loading.tsx
      page.tsx
    reports/
      page.tsx
    settings/
      communication/
        page.tsx
      permissions/
        page.tsx
      profile/
        page.tsx
      security/
        page.tsx
      page.tsx
    stop-supply/
      loading.tsx
      page.tsx
    users/
      [id]/
        page.tsx
      loading.tsx
      page.tsx
    layout.tsx
  components/
    FeatureCard.tsx
    FeatureSection.module.css
    FeatureSection.tsx
  landing/
    page.tsx
  lib/
    constants.ts
  login/
    layout.tsx
    page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    accordion.tsx
    alert-dialog.tsx
    alert.tsx
    aspect-ratio.tsx
    avatar.tsx
    badge.tsx
    breadcrumb.tsx
    button.tsx
    calendar.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    checkbox.tsx
    collapsible.tsx
    command.tsx
    context-menu.tsx
    date-picker.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form.tsx
    hover-card.tsx
    input-otp.tsx
    input.tsx
    label.tsx
    menubar.tsx
    navigation-menu.tsx
    pagination.tsx
    popover.tsx
    progress.tsx
    radio-group.tsx
    resizable.tsx
    scroll-area.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    sidebar.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    toast.tsx
    toaster.tsx
    toggle-group.tsx
    toggle.tsx
    tooltip.tsx
    use-mobile.tsx
    use-toast.ts
  auth-provider.tsx
  create-anchor-dialog.tsx
  create-dealer-dialog.tsx
  create-user-dialog.tsx
  dashboard-chart.tsx
  date-range-picker.tsx
  edit-anchor-dialog.tsx
  edit-dealer-dialog.tsx
  edit-dealer-master-dialog.tsx
  header.tsx
  portfolio-health-chart.tsx
  recent-transactions.tsx
  sidebar-provider.tsx
  sidebar.tsx
  stop-supply-detail.tsx
  theme-provider.tsx
  theme-toggle.tsx
  top-anchors.tsx
  user-transactions.tsx
hooks/
  use-mobile.tsx
  use-toast.ts
lib/
  auth.ts
  utils.ts
public/
  placeholder-logo.svg
  placeholder.svg
styles/
  globals.css
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="~/.zprofile">
# Load zshrc in non-login shells
if [[ -f ~/.zshrc ]]; then
  source ~/.zshrc
fi

# Make sure Node.js environment is accessible
# Uncomment and adjust the paths below based on your Node.js installation method

# For nvm users:
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# For fnm users:
# eval "$(fnm env --use-on-cd)"

# For Homebrew node installations:
# export PATH="/usr/local/opt/node@16/bin:$PATH"
</file>

<file path="~/.zshrc">
# Quick alias to initialize development environment
alias init-node="source ~/.zshrc"
</file>

<file path="app/(dashboard)/anchor-master/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/(dashboard)/dealer-master/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/(dashboard)/dealer-status/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/(dashboard)/fldg-view/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/(dashboard)/settings/communication/page.tsx">
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"

export default function CommunicationSettingsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Communication Settings</h1>
      <Card>
        <CardHeader>
          <CardTitle>Contact Information</CardTitle>
          <CardDescription>Manage your email and phone number for communications.</CardDescription>
        </CardHeader>
        <CardContent>
          <form className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email Address</Label>
              <Input id="email" type="email" placeholder="john@example.com" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="phone">Phone Number</Label>
              <Input id="phone" type="tel" placeholder="+27 71 234 5678" />
            </div>
            <Button type="submit">Update Contact Info</Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/(dashboard)/settings/permissions/page.tsx">
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"

export default function PermissionsSettingsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Permissions Settings</h1>
      <Card>
        <CardHeader>
          <CardTitle>Access Control</CardTitle>
          <CardDescription>Manage user roles and permissions.</CardDescription>
        </CardHeader>
        <CardContent>
          <form className="space-y-4">
            <div className="space-y-2">
              <Label>User Permissions</Label>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Checkbox id="manage-users" />
                  <Label htmlFor="manage-users">Manage Users</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox id="manage-transactions" />
                  <Label htmlFor="manage-transactions">Manage Transactions</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox id="view-analytics" />
                  <Label htmlFor="view-analytics">View Analytics</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Checkbox id="manage-settings" />
                  <Label htmlFor="manage-settings">Manage Settings</Label>
                </div>
              </div>
            </div>
            <Button type="submit">Update Permissions</Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/(dashboard)/settings/profile/page.tsx">
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"

export default function ProfileSettingsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Profile Settings</h1>
      <Card>
        <CardHeader>
          <CardTitle>Personal Information</CardTitle>
          <CardDescription>Update your personal details here.</CardDescription>
        </CardHeader>
        <CardContent>
          <form className="space-y-4">
            <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
              <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input id="firstName" placeholder="John" />
              </div>
              <div className="space-y-2">
                <Label htmlFor="lastName">Last Name</Label>
                <Input id="lastName" placeholder="Doe" />
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="username">Username</Label>
              <Input id="username" placeholder="johndoe" />
            </div>
            <Button type="submit">Save Changes</Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/(dashboard)/settings/security/page.tsx">
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Button } from "@/components/ui/button"

export default function SecuritySettingsPage() {
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold">Security Settings</h1>
      <Card>
        <CardHeader>
          <CardTitle>Change Password</CardTitle>
          <CardDescription>Ensure your account is using a long, random password to stay secure.</CardDescription>
        </CardHeader>
        <CardContent>
          <form className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="currentPassword">Current Password</Label>
              <Input id="currentPassword" type="password" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="newPassword">New Password</Label>
              <Input id="newPassword" type="password" />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirm New Password</Label>
              <Input id="confirmPassword" type="password" />
            </div>
            <Button type="submit">Update Password</Button>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="app/(dashboard)/stop-supply/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/(dashboard)/users/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/(dashboard)/users/page.tsx">
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, UserCog } from "lucide-react"
import Link from "next/link"
import { CreateUserDialog } from "@/components/create-user-dialog"

// Update the users page to improve responsiveness
export default function UsersPage() {
  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Users</h1>
          <p className="text-muted-foreground">Manage user accounts and wallets</p>
        </div>
        <CreateUserDialog />
      </div>

      <Card>
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row sm:items-center gap-4">
            <div className="flex items-center gap-2 w-full max-w-sm">
              <Search className="h-4 w-4 text-muted-foreground" />
              <Input placeholder="Search users..." className="h-9" />
            </div>
            <div className="flex items-center gap-2 ml-auto">
              <Button variant="outline" size="sm">
                Export
              </Button>
              <Button variant="outline" size="sm">
                Filter
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0 overflow-auto">
          <div className="w-full min-w-[640px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Email</TableHead>
                  <TableHead>ID Type</TableHead>
                  <TableHead>Phone</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {users.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell className="font-medium">
                      {user.name} {user.surname}
                    </TableCell>
                    <TableCell>{user.email}</TableCell>
                    <TableCell>{user.idType}</TableCell>
                    <TableCell>{user.phone}</TableCell>
                    <TableCell>
                      <div
                        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold ${
                          user.status === "Active"
                            ? "bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300"
                            : "bg-yellow-50 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-300"
                        }`}
                      >
                        {user.status}
                      </div>
                    </TableCell>
                    <TableCell className="text-right">
                      <Button variant="ghost" size="icon" asChild>
                        <Link href={`/users/${user.id}`}>
                          <UserCog className="h-4 w-4" />
                          <span className="sr-only">Edit user</span>
                        </Link>
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

const users = [
  {
    id: "1",
    name: "Thabo",
    surname: "Mbeki",
    email: "thabo.mbeki@example.com",
    idType: "ID",
    phone: "+27 71 234 5678",
    status: "Active",
  },
  {
    id: "2",
    name: "Nomzamo",
    surname: "Mbatha",
    email: "nomzamo.mbatha@example.com",
    idType: "Passport",
    phone: "+27 82 345 6789",
    status: "Active",
  },
  {
    id: "3",
    name: "Siya",
    surname: "Kolisi",
    email: "siya.kolisi@example.com",
    idType: "ID",
    phone: "+27 63 456 7890",
    status: "Active",
  },
  {
    id: "4",
    name: "Bonang",
    surname: "Matheba",
    email: "bonang.matheba@example.com",
    idType: "ID",
    phone: "+27 74 567 8901",
    status: "Pending",
  },
  {
    id: "5",
    name: "Trevor",
    surname: "Noah",
    email: "trevor.noah@example.com",
    idType: "Passport",
    phone: "+27 85 678 9012",
    status: "Active",
  },
  {
    id: "6",
    name: "Patrice",
    surname: "Motsepe",
    email: "patrice.motsepe@example.com",
    idType: "ID",
    phone: "+27 76 789 0123",
    status: "Active",
  },
  {
    id: "7",
    name: "Caster",
    surname: "Semenya",
    email: "caster.semenya@example.com",
    idType: "ID",
    phone: "+27 87 890 1234",
    status: "Pending",
  },
  {
    id: "8",
    name: "Elon",
    surname: "Musk",
    email: "elon.musk@example.com",
    idType: "Asylum Seeker",
    phone: "+27 78 901 2345",
    status: "Active",
  },
]
</file>

<file path="app/(dashboard)/layout.tsx">
import type React from "react"
import { Sidebar } from "@/components/sidebar"
import { Header } from "@/components/header"
import { SidebarProvider } from "@/components/sidebar-provider"

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <SidebarProvider>
      <div className="min-h-screen bg-background">
        <Sidebar />
        <div className="">
          <Header />
          <main className="p-4 md:p-6 lg:p-8">{children}</main>
        </div>
      </div>
    </SidebarProvider>
  )
}
</file>

<file path="app/components/FeatureCard.tsx">
// app/components/FeatureCard.tsx
"use client";

import React from 'react';
import * as LucideIcons from 'lucide-react';
import { FeatureInfo } from '@/lib/constants'; // Import the interface

// Helper to get icon component by name
const getIcon = (iconName: string): React.ElementType | null => {
  const IconComponent = (LucideIcons as any)[iconName];
  return IconComponent || null;
};

interface FeatureCardProps {
  feature: FeatureInfo;
  className?: string; // Allow passing additional class names
}

const FeatureCard: React.FC<FeatureCardProps> = ({ feature, className }) => {
  const { title, description, iconNames } = feature;

  return (
    <div className={`p-6 bg-white rounded-lg shadow-md flex flex-col items-center text-center ${className}`}>
      <div className="flex space-x-4 mb-4">
        {iconNames.map((iconName) => {
          const Icon = getIcon(iconName);
          return Icon ? <Icon key={iconName} className="w-8 h-8 text-blue-600" /> : null;
        })}
      </div>
      <h3 className="text-xl font-semibold mb-2">{title}</h3>
      <p className="text-gray-600 text-sm">{description}</p>
    </div>
  );
};

export default FeatureCard;
</file>

<file path="app/components/FeatureSection.module.css">
/* app/components/FeatureSection.module.css */

.featureSectionContainer {
  /* Tailwind's bg-gray-50 is already applied in the component. */
  /* Ensure sufficient padding for the section if not covered by Tailwind utility 'py-12' */
  /* Example: padding-top: 3rem; padding-bottom: 3rem; */
}

.featureGrid {
  /* Tailwind classes `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8` handle the responsiveness. */
  /* No additional grid-specific CSS needed unless more complex behavior is required. */
}

.featureCard {
  /* Tailwind classes `p-6 bg-white rounded-lg shadow-md flex flex-col items-center text-center` are applied in FeatureCard.tsx */
  /* Adding a subtle transition for hover effects and ensuring consistent height for cards in a row if content varies. */
  transition: all 0.3s ease-in-out;
  display: flex; /* Ensures flex properties like align-items work as expected */
  flex-direction: column; /* Stacks icon, title, description vertically */
  /* min-height: 280px; /* Example: Enforce a minimum height for cards to align them if text length varies significantly */
}

.featureCard:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* Tailwind's shadow-lg */
}

/* Icon styling is handled by Tailwind classes directly in FeatureCard.tsx: className="w-8 h-8 text-blue-600" */

/* Title styling is handled by Tailwind classes: className="text-xl font-semibold mb-2" */

/* Description styling is handled by Tailwind classes: className="text-gray-600 text-sm" */
</file>

<file path="app/components/FeatureSection.tsx">
// app/components/FeatureSection.tsx
"use client";

import React from 'react';
import FeatureCard from './FeatureCard'; // Import the FeatureCard component
import { landingPageFeatures } from '@/lib/constants'; // Import the feature data
import styles from './FeatureSection.module.css'; // Import CSS module

const FeatureSection: React.FC = () => {
  return (
    <section className={`py-12 bg-gray-50 w-full ${styles.featureSectionContainer}`}>
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center mb-10">
          A Powerful, Data-Driven Approach to Supply Chain Risk.
        </h2>
        <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8 ${styles.featureGrid}`}>
          {landingPageFeatures.map((feature, index) => (
            <FeatureCard key={index} feature={feature} className={styles.featureCard} />
          ))}
        </div>
      </div>
    </section>
  );
};

export default FeatureSection;
</file>

<file path="app/lib/constants.ts">
// app/lib/constants.ts

// Define an interface for the feature objects for type safety
export interface FeatureInfo {
  title: string;
  description: string;
  iconNames: string[]; // Array of icon names (from lucide-react, e.g., 'ShieldCheck', 'TrendingUp')
}

// Export an array of feature objects
export const landingPageFeatures: FeatureInfo[] = [
  {
    title: "Comprehensive Risk Assessment",
    description: "Utilize advanced analytics to identify potential risks in your supply chain finance portfolio, ensuring proactive management.",
    iconNames: ["ShieldCheck", "Activity", "Search"], // Placeholder Lucide icon names
  },
  {
    title: "Real-time Monitoring",
    description: "Stay updated with continuous monitoring of your portfolio, receiving timely alerts on critical changes and potential issues.",
    iconNames: ["BellRing", "Clock", "Eye"], // Placeholder Lucide icon names
  },
  {
    title: "Data-Driven Insights",
    description: "Leverage actionable insights derived from robust data analysis to make informed decisions and optimize your strategies.",
    iconNames: ["BarChartBig", "Brain", "Lightbulb"], // Placeholder Lucide icon names
  },
  {
    title: "Customizable Reporting",
    description: "Generate detailed and customizable reports to track performance, identify trends, and communicate effectively with stakeholders.",
    iconNames: ["FileText", "Settings2", "ClipboardList"], // Placeholder Lucide icon names
  },
];
</file>

<file path="app/login/layout.tsx">
import type React from "react"

export default function LoginLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return <>{children}</>
}
</file>

<file path="app/login/page.tsx">
"use client"

import { useState } from "react"
import { useRouter } from "next/navigation"
import { login } from "@/lib/auth"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Alert, AlertDescription } from "@/components/ui/alert"

export default function LoginPage() {
  const router = useRouter()
  const [email, setEmail] = useState("")
  const [password, setPassword] = useState("")
  const [error, setError] = useState("")
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError("")
    setIsLoading(true)

    try {
      const user = await login(email, password)
      if (user) {
        router.push("/dashboard")
      } else {
        setError("Invalid email or password")
      }
    } catch (err) {
      setError("An error occurred. Please try again.")
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="relative flex min-h-screen items-center justify-center">
      {/* Background Pattern */}
      <div className="absolute inset-0 overflow-hidden">
        <svg 
          className="absolute h-full w-full"
          xmlns="http://www.w3.org/2000/svg"
          width="100%"
          height="100%"
          preserveAspectRatio="none"
        >
          <defs>
            <pattern
              id="grid-pattern"
              width="40"
              height="40"
              patternUnits="userSpaceOnUse"
            >
              <path
                d="M 40 0 L 0 0 0 40"
                fill="none"
                stroke="currentColor"
                strokeWidth="0.7"
                className="text-slate-300/30 dark:text-slate-700/30"
              />
            </pattern>
            <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="#EEF2FF" className="dark:stop-color-[#1E293B]" />
              <stop offset="100%" stopColor="#E0F2FE" className="dark:stop-color-[#0F172A]" />
            </linearGradient>
            <filter id="blur-filter" x="-50%" y="-50%" width="200%" height="200%">
              <feGaussianBlur in="SourceGraphic" stdDeviation="50" />
            </filter>
          </defs>
          <rect width="100%" height="100%" fill="url(#bg-gradient)" />
          <rect width="100%" height="100%" fill="url(#grid-pattern)" />
          
          {/* Bold accent elements */}
          <circle cx="10%" cy="20%" r="15%" fill="#60A5FA" fillOpacity="0.4" filter="url(#blur-filter)" className="dark:fill-blue-900" />
          <circle cx="85%" cy="75%" r="20%" fill="#818CF8" fillOpacity="0.4" filter="url(#blur-filter)" className="dark:fill-indigo-900" />
          <circle cx="50%" cy="30%" r="10%" fill="#34D399" fillOpacity="0.2" filter="url(#blur-filter)" className="dark:fill-emerald-900" />
          
          {/* Abstract shapes */}
          <path d="M0,0 L100,0 L100,100 L0,100 L0,0 Z" fill="none" stroke="#60A5FA" strokeWidth="2" strokeOpacity="0.1" className="dark:stroke-blue-800" />
          <path d="M0,100 C30,90 70,110 100,100" fill="none" stroke="#818CF8" strokeWidth="3" strokeOpacity="0.15" className="dark:stroke-indigo-800" />
        </svg>
      </div>

      <Card className="mx-auto max-w-sm z-10 shadow-2xl border-opacity-40 backdrop-blur-sm bg-white/70 dark:bg-slate-900/70">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl font-bold text-center">Early Warning Signal</CardTitle>
          <CardDescription className="text-center">Enter your credentials to sign in to your account</CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input 
                id="email" 
                type="email" 
                placeholder="user@yesbnak.in" 
                value={email} 
                onChange={(e) => setEmail(e.target.value)}
                required 
                className="bg-white/90 dark:bg-slate-800/90"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input 
                id="password" 
                type="password" 
                value={password} 
                onChange={(e) => setPassword(e.target.value)}
                required
                className="bg-white/90 dark:bg-slate-800/90"
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? "Signing in..." : "Sign In"}
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  )
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;

    /* Sidebar specific variables */
    --sidebar: 0 0% 100%;
    --sidebar-foreground: 240 10% 3.9%;
    --sidebar-muted: 240 4.8% 95.9%;
    --sidebar-muted-foreground: 240 3.8% 46.1%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 240 5.9% 90%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;

    /* Sidebar specific variables */
    --sidebar: 240 10% 3.9%;
    --sidebar-foreground: 0 0% 98%;
    --sidebar-muted: 240 3.7% 15.9%;
    --sidebar-muted-foreground: 240 5% 64.9%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 240 3.7% 15.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/* Sidebar styles */
.bg-sidebar {
  background-color: hsl(var(--sidebar));
}

.text-sidebar-foreground {
  color: hsl(var(--sidebar-foreground));
}

.bg-sidebar-accent {
  background-color: hsl(var(--sidebar-accent));
}

.text-sidebar-accent-foreground {
  color: hsl(var(--sidebar-accent-foreground));
}

/* Add responsive utility classes */
@layer utilities {
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
}
</file>

<file path="components/ui/accordion.tsx">
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="components/ui/alert-dialog.tsx">
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/aspect-ratio.tsx">
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/ui/badge.tsx">
import type * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
)

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }
</file>

<file path="components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="components/ui/calendar.tsx">
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/carousel.tsx">
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="components/ui/chart.tsx">
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="components/ui/collapsible.tsx">
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="components/ui/command.tsx">
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="components/ui/context-menu.tsx">
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="components/ui/date-picker.tsx">
"use client"

import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

export function DatePicker({
  className,
  selected,
  onSelect,
  placeholder = "Pick a date",
  disabled = false,
}: {
  className?: React.HTMLAttributes<HTMLDivElement>["className"]
  selected?: Date
  onSelect?: (date: Date | undefined) => void
  placeholder?: string
  disabled?: boolean
}) {
  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn(
              "w-full justify-start text-left font-normal",
              !selected && "text-muted-foreground"
            )}
            disabled={disabled}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {selected ? format(selected, "PPP") : <span>{placeholder}</span>}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            mode="single"
            selected={selected}
            onSelect={onSelect}
            initialFocus
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="components/ui/drawer.tsx">
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="components/ui/form.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="components/ui/hover-card.tsx">
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="components/ui/input-otp.tsx">
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="components/ui/menubar.tsx">
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="components/ui/radio-group.tsx">
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="components/ui/resizable.tsx">
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="components/ui/sheet.tsx">
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="components/ui/sidebar.tsx">
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="components/ui/sonner.tsx">
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }
</file>

<file path="components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/ui/toast.tsx">
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="components/ui/toaster.tsx">
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="components/ui/toggle-group.tsx">
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="components/ui/toggle.tsx">
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="components/ui/tooltip.tsx">
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="components/ui/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="components/ui/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="components/create-anchor-dialog.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus } from "lucide-react"

export function CreateAnchorDialog() {
  const [open, setOpen] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // In a real app, you would submit the form data to your API
    setOpen(false)
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <Plus className="mr-2 h-4 w-4" />
          Add Anchor
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Create New Anchor</DialogTitle>
          <DialogDescription>
            Add a new anchor entity to the system. This will create a new anchor record.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="anchorName">Anchor Name</Label>
              <Input id="anchorName" placeholder="Enter anchor name" required />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="industry">Industry</Label>
                <Select required>
                  <SelectTrigger id="industry">
                    <SelectValue placeholder="Select industry" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Banking">Banking</SelectItem>
                    <SelectItem value="Retail">Retail</SelectItem>
                    <SelectItem value="Telecommunications">Telecommunications</SelectItem>
                    <SelectItem value="Energy">Energy</SelectItem>
                    <SelectItem value="Insurance">Insurance</SelectItem>
                    <SelectItem value="Other">Other</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="status">Status</Label>
                <Select defaultValue="Active">
                  <SelectTrigger id="status">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Active">Active</SelectItem>
                    <SelectItem value="Inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="contactPerson">Contact Person</Label>
              <Input id="contactPerson" placeholder="Enter contact person name" required />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" placeholder="contact@example.com" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input id="phone" placeholder="+27" required />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="address">Address</Label>
              <Input id="address" placeholder="Enter address" />
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">Create Anchor</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="components/create-dealer-dialog.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Plus } from "lucide-react"

export function CreateDealerDialog() {
  const [open, setOpen] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // In a real app, you would submit the form data to your API
    setOpen(false)
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <Plus className="mr-2 h-4 w-4" />
          Add Dealer
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Create New Dealer</DialogTitle>
          <DialogDescription>
            Add a new dealer entity to the system. This will create a new dealer record.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="dealerName">Dealer Name</Label>
              <Input id="dealerName" placeholder="Enter dealer name" required />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="anchor">Anchor</Label>
                <Select required>
                  <SelectTrigger id="anchor">
                    <SelectValue placeholder="Select anchor" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Standard Bank">Standard Bank</SelectItem>
                    <SelectItem value="Shoprite Holdings">Shoprite Holdings</SelectItem>
                    <SelectItem value="MTN Group">MTN Group</SelectItem>
                    <SelectItem value="Sasol Limited">Sasol Limited</SelectItem>
                    <SelectItem value="Discovery Limited">Discovery Limited</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="status">Status</Label>
                <Select defaultValue="Active">
                  <SelectTrigger id="status">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Active">Active</SelectItem>
                    <SelectItem value="Inactive">Inactive</SelectItem>
                    <SelectItem value="Stop Supply">Stop Supply</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="contactPerson">Contact Person</Label>
              <Input id="contactPerson" placeholder="Enter contact person name" required />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" placeholder="contact@example.com" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input id="phone" placeholder="+27" required />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="creditLimit">Credit Limit (ZAR)</Label>
                <Input id="creditLimit" type="number" placeholder="0.00" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="registrationNumber">Registration Number</Label>
                <Input id="registrationNumber" placeholder="Enter registration number" />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="address">Business Address</Label>
              <Input id="address" placeholder="Enter business address" />
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">Create Dealer</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="components/create-user-dialog.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { UserPlus } from "lucide-react"

export function CreateUserDialog() {
  const [open, setOpen] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // In a real app, you would submit the form data to your API
    setOpen(false)
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <UserPlus className="mr-2 h-4 w-4" />
          Add User
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Create New User</DialogTitle>
          <DialogDescription>
            Add a new user to the platform. They will receive an email to set up their account.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="firstName">First Name</Label>
                <Input id="firstName" placeholder="Enter first name" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="surname">Surname</Label>
                <Input id="surname" placeholder="Enter surname" required />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input id="email" type="email" placeholder="user@example.com" required />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="idType">ID Type</Label>
                <Select required>
                  <SelectTrigger id="idType">
                    <SelectValue placeholder="Select ID type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="ID">ID</SelectItem>
                    <SelectItem value="Passport">Passport</SelectItem>
                    <SelectItem value="Asylum Seeker">Asylum Seeker</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <Label htmlFor="phone">Phone Number</Label>
                <Input id="phone" placeholder="+27" required />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="initialBalance">Initial Balance (ZAR)</Label>
              <Input id="initialBalance" type="number" placeholder="0.00" />
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">Create User</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="components/dashboard-chart.tsx">
"use client"

import { useEffect, useState } from "react"
import { Bar, BarChart, CartesianGrid, ResponsiveContainer, Tooltip, XAxis, YAxis } from "recharts"

export function DashboardChart() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return (
      <div className="flex items-center justify-center h-[350px] w-full bg-muted/20 rounded-md">
        <p className="text-muted-foreground">Loading chart...</p>
      </div>
    )
  }

  return (
    <div className="h-[350px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data} margin={{ top: 10, right: 10, left: 10, bottom: 20 }}>
          <XAxis dataKey="name" stroke="#888888" fontSize={12} tickLine={false} axisLine={false} />
          <YAxis
            stroke="#888888"
            fontSize={12}
            tickLine={false}
            axisLine={false}
            tickFormatter={(value) => `₹${value}`}
          />
          <CartesianGrid strokeDasharray="3 3" vertical={false} />
          <Tooltip
            formatter={(value) => [`₹${value}`, "Amount"]}
            contentStyle={{
              backgroundColor: "hsl(var(--background))",
              borderColor: "hsl(var(--border))",
              borderRadius: "var(--radius)",
            }}
          />
          <Bar dataKey="total" fill="hsl(var(--primary))" radius={[4, 4, 0, 0]} />
        </BarChart>
      </ResponsiveContainer>
    </div>
  )
}

const data = [
  {
    name: "Jan",
    total: 45000,
  },
  {
    name: "Feb",
    total: 63500,
  },
  {
    name: "Mar",
    total: 58200,
  },
  {
    name: "Apr",
    total: 72800,
  },
  {
    name: "May",
    total: 85600,
  },
  {
    name: "Jun",
    total: 92400,
  },
  {
    name: "Jul",
    total: 105200,
  },
  {
    name: "Aug",
    total: 91000,
  },
  {
    name: "Sep",
    total: 97500,
  },
  {
    name: "Oct",
    total: 110800,
  },
  {
    name: "Nov",
    total: 142500,
  },
  {
    name: "Dec",
    total: 168000,
  },
]
</file>

<file path="components/date-range-picker.tsx">
"use client"

import * as React from "react"
import { format } from "date-fns"
import { CalendarIcon } from "lucide-react"
import type { DateRange } from "react-day-picker"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"

export function DatePickerWithRange({ className }: React.HTMLAttributes<HTMLDivElement>) {
  const [date, setDate] = React.useState<DateRange | undefined>({
    from: new Date(2023, 10, 1),
    to: new Date(),
  })

  return (
    <div className={cn("grid gap-2", className)}>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            id="date"
            variant={"outline"}
            className={cn("w-full justify-start text-left font-normal", !date && "text-muted-foreground")}
          >
            <CalendarIcon className="mr-2 h-4 w-4" />
            {date?.from ? (
              date.to ? (
                <>
                  {format(date.from, "LLL dd, y")} - {format(date.to, "LLL dd, y")}
                </>
              ) : (
                format(date.from, "LLL dd, y")
              )
            ) : (
              <span>Pick a date</span>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-auto p-0" align="start">
          <Calendar
            initialFocus
            mode="range"
            defaultMonth={date?.from}
            selected={date}
            onSelect={setDate}
            numberOfMonths={2}
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}
</file>

<file path="components/edit-dealer-master-dialog.tsx">
"use client"

import type React from "react"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Edit, X, Check, ChevronsUpDown } from "lucide-react"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { cn } from "@/lib/utils"

export type DealerMaster = {
  id: string
  dealerCustId: string
  name: string
  anchor: string
  programName: string
  programCustId: string
  contactPerson: string
  contactEmail: string
  creditLimit: number
  status: string
  fldgInvocationEmails?: string[]
  stopSupplyInvocationEmails?: string[]
}

interface EditDealerMasterDialogProps {
  dealer: DealerMaster
  anchorEmails: string[]
}

export function EditDealerMasterDialog({ dealer, anchorEmails }: EditDealerMasterDialogProps) {
  const [open, setOpen] = useState(false)
  const [formData, setFormData] = useState<DealerMaster>({ 
    ...dealer,
    fldgInvocationEmails: dealer.fldgInvocationEmails || [],
    stopSupplyInvocationEmails: dealer.stopSupplyInvocationEmails || []
  })
  
  const [fldgPopoverOpen, setFldgPopoverOpen] = useState(false)
  const [stopSupplyPopoverOpen, setStopSupplyPopoverOpen] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // In a real app, you would submit the form data to your API
    console.log("Updated dealer master data:", formData)
    setOpen(false)
  }

  // Function to toggle an email in a multi-select list
  const toggleEmail = (email: string, field: 'fldgInvocationEmails' | 'stopSupplyInvocationEmails') => {
    setFormData(prev => {
      const currentEmails = prev[field] || []
      const newEmails = currentEmails.includes(email)
        ? currentEmails.filter(e => e !== email)
        : [...currentEmails, email]
      
      return {
        ...prev,
        [field]: newEmails
      }
    })
  }

  // Function to remove an email from a multi-select list
  const removeEmail = (email: string, field: 'fldgInvocationEmails' | 'stopSupplyInvocationEmails') => {
    setFormData(prev => ({
      ...prev,
      [field]: (prev[field] || []).filter(e => e !== email)
    }))
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Edit className="h-4 w-4" />
          <span className="sr-only">Edit {dealer.name}</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle>Edit Dealer: {dealer.name}</DialogTitle>
          <DialogDescription>
            Configure email settings for FLDG and Stop Supply invocations.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="dealerCustId">Dealer Cust ID</Label>
                <Input id="dealerCustId" value={formData.dealerCustId} disabled className="bg-muted" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="name">Dealer Name</Label>
                <Input id="name" value={formData.name} disabled className="bg-muted" />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="anchor">Anchor</Label>
                <Input id="anchor" value={formData.anchor} disabled className="bg-muted" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="status">Dealer Status</Label>
                <Input id="status" value={formData.status} disabled className="bg-muted" />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="programName">Program Name</Label>
                <Input id="programName" value={formData.programName} disabled className="bg-muted" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="programCustId">Program Cust ID</Label>
                <Input id="programCustId" value={formData.programCustId} disabled className="bg-muted" />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="fldgInvocation">FLDG Invocation Email</Label>
              <Popover open={fldgPopoverOpen} onOpenChange={setFldgPopoverOpen}>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    role="combobox"
                    aria-expanded={fldgPopoverOpen}
                    className="w-full justify-between h-auto min-h-10 py-2"
                  >
                    <div className="flex flex-wrap gap-1">
                      {formData.fldgInvocationEmails && formData.fldgInvocationEmails.length > 0 ? (
                        formData.fldgInvocationEmails.map(email => (
                          <Badge 
                            variant="secondary" 
                            key={email}
                            className="mr-1 mb-1"
                          >
                            {email}
                            <span
                              className="ml-1 ring-offset-background rounded-full outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer"
                              onMouseDown={e => {
                                e.preventDefault()
                                e.stopPropagation()
                              }}
                              onClick={() => removeEmail(email, 'fldgInvocationEmails')}
                            >
                              <X className="h-3 w-3 text-muted-foreground hover:text-foreground" />
                            </span>
                          </Badge>
                        ))
                      ) : (
                        <span className="text-muted-foreground">Select emails...</span>
                      )}
                    </div>
                    <ChevronsUpDown className="h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-full p-0">
                  <Command>
                    <CommandInput placeholder="Search emails..." className="h-9" />
                    <CommandList>
                      <CommandEmpty>No emails found.</CommandEmpty>
                      <CommandGroup>
                        {anchorEmails.map(email => (
                          <CommandItem
                            key={email}
                            value={email}
                            onSelect={() => toggleEmail(email, 'fldgInvocationEmails')}
                          >
                            {email}
                            <Check
                              className={cn(
                                "ml-auto h-4 w-4",
                                formData.fldgInvocationEmails?.includes(email) ? "opacity-100" : "opacity-0"
                              )}
                            />
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
            </div>

            <div className="space-y-2">
              <Label htmlFor="stopSupplyInvocation">Stop Supply Invocation Email</Label>
              <Popover open={stopSupplyPopoverOpen} onOpenChange={setStopSupplyPopoverOpen}>
                <PopoverTrigger asChild>
                  <Button
                    variant="outline"
                    role="combobox"
                    aria-expanded={stopSupplyPopoverOpen}
                    className="w-full justify-between h-auto min-h-10 py-2"
                  >
                    <div className="flex flex-wrap gap-1">
                      {formData.stopSupplyInvocationEmails && formData.stopSupplyInvocationEmails.length > 0 ? (
                        formData.stopSupplyInvocationEmails.map(email => (
                          <Badge 
                            variant="secondary" 
                            key={email}
                            className="mr-1 mb-1"
                          >
                            {email}
                            <span
                              className="ml-1 ring-offset-background rounded-full outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer"
                              onMouseDown={e => {
                                e.preventDefault()
                                e.stopPropagation()
                              }}
                              onClick={() => removeEmail(email, 'stopSupplyInvocationEmails')}
                            >
                              <X className="h-3 w-3 text-muted-foreground hover:text-foreground" />
                            </span>
                          </Badge>
                        ))
                      ) : (
                        <span className="text-muted-foreground">Select emails...</span>
                      )}
                    </div>
                    <ChevronsUpDown className="h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-full p-0">
                  <Command>
                    <CommandInput placeholder="Search emails..." className="h-9" />
                    <CommandList>
                      <CommandEmpty>No emails found.</CommandEmpty>
                      <CommandGroup>
                        {anchorEmails.map(email => (
                          <CommandItem
                            key={email}
                            value={email}
                            onSelect={() => toggleEmail(email, 'stopSupplyInvocationEmails')}
                          >
                            {email}
                            <Check
                              className={cn(
                                "ml-auto h-4 w-4",
                                formData.stopSupplyInvocationEmails?.includes(email) ? "opacity-100" : "opacity-0"
                              )}
                            />
                          </CommandItem>
                        ))}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
            </div>

          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">Save Changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="components/recent-transactions.tsx">
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { ArrowUpRight, ArrowDownLeft } from "lucide-react"

export function RecentTransactions() {
  return (
    <div className="space-y-8">
      {transactions.map((transaction) => (
        <div key={transaction.id} className="flex items-center">
          <Avatar className="h-9 w-9 border">
            {transaction.type === "credit" ? (
              <ArrowDownLeft className="h-4 w-4 text-green-500" />
            ) : (
              <ArrowUpRight className="h-4 w-4 text-red-500" />
            )}
            <AvatarFallback>{transaction.name[0]}</AvatarFallback>
          </Avatar>
          <div className="ml-4 space-y-1">
            <p className="text-sm font-medium leading-none">{transaction.name}</p>
            <p className="text-sm text-muted-foreground">{transaction.date}</p>
          </div>
          <div className={`ml-auto font-medium ${transaction.type === "credit" ? "text-green-500" : "text-red-500"}`}>
            {transaction.type === "credit" ? "+" : "-"}₹ {transaction.amount.toFixed(2)}
          </div>
        </div>
      ))}
    </div>
  )
}

const transactions = [
  {
    id: "1",
    name: "Thabo Mbeki",
    amount: 250.0,
    date: "2023-11-14",
    type: "credit",
  },
  {
    id: "2",
    name: "Nomzamo Mbatha",
    amount: 1000.0,
    date: "2023-11-13",
    type: "debit",
  },
  {
    id: "3",
    name: "Siya Kolisi",
    amount: 500.0,
    date: "2023-11-12",
    type: "credit",
  },
  {
    id: "4",
    name: "Trevor Noah",
    amount: 750.0,
    date: "2023-11-11",
    type: "debit",
  },
  {
    id: "5",
    name: "Patrice Motsepe",
    amount: 2500.0,
    date: "2023-11-10",
    type: "credit",
  },
]
</file>

<file path="components/sidebar-provider.tsx">
"use client"

import { createContext, useContext, useState, type ReactNode } from "react"

type SidebarContextType = {
  isOpen: boolean
  toggle: () => void
}

const SidebarContext = createContext<SidebarContextType | undefined>(undefined)

export function SidebarProvider({ children }: { children: ReactNode }) {
  const [isOpen, setIsOpen] = useState(false)

  const toggle = () => {
    setIsOpen(!isOpen)
  }

  return <SidebarContext.Provider value={{ isOpen, toggle }}>{children}</SidebarContext.Provider>
}

export function useSidebar() {
  const context = useContext(SidebarContext)
  if (context === undefined) {
    throw new Error("useSidebar must be used within a SidebarProvider")
  }
  return context
}
</file>

<file path="components/theme-provider.tsx">
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</file>

<file path="components/theme-toggle.tsx">
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon" className="rounded-full">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
</file>

<file path="components/top-anchors.tsx">
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"

const topAnchorsByValue = [
  { id: 1, name: "HDFC Bank", value: 120000000 },
  { id: 2, name: "ICICI Bank", value: 95000000 },
  { id: 3, name: "Axis Bank", value: 87000000 },
  { id: 4, name: "Kotak Mahindra", value: 65000000 },
  { id: 5, name: "SBI", value: 54000000 },
]

const topAnchorsByDealers = [
  { id: 1, name: "HDFC Bank", dealers: 120 },
  { id: 2, name: "ICICI Bank", dealers: 98 },
  { id: 3, name: "Axis Bank", dealers: 87 },
  { id: 4, name: "Kotak Mahindra", dealers: 65 },
  { id: 5, name: "SBI", dealers: 54 },
]

export function TopAnchors() {
  return (
    <Tabs defaultValue="value" className="w-full">
      <TabsList className="mb-2">
        <TabsTrigger value="value">By Value</TabsTrigger>
        <TabsTrigger value="dealers">By # of Dealers</TabsTrigger>
      </TabsList>
      <TabsContent value="value">
        <div className="space-y-4">
          {topAnchorsByValue.map(anchor => (
            <div key={anchor.id} className="flex items-center gap-4">
              <Avatar className="h-8 w-8">
                <AvatarFallback>{anchor.name[0]}</AvatarFallback>
              </Avatar>
              <div className="flex-1">
                <div className="font-medium text-sm">{anchor.name}</div>
              </div>
              <div className="font-semibold text-base">₹ {anchor.value.toLocaleString("en-IN")}</div>
            </div>
          ))}
        </div>
      </TabsContent>
      <TabsContent value="dealers">
        <div className="space-y-4">
          {topAnchorsByDealers.map(anchor => (
            <div key={anchor.id} className="flex items-center gap-4">
              <Avatar className="h-8 w-8">
                <AvatarFallback>{anchor.name[0]}</AvatarFallback>
              </Avatar>
              <div className="flex-1">
                <div className="font-medium text-sm">{anchor.name}</div>
              </div>
              <div className="font-semibold text-base">{anchor.dealers} Dealers</div>
            </div>
          ))}
        </div>
      </TabsContent>
    </Tabs>
  )
}
</file>

<file path="hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="hooks/use-toast.ts">
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="lib/auth.ts">
"use client"

// Simple authentication utility for demonstration purposes
// In a real app, you would use a proper auth provider like NextAuth.js

export type User = {
  email: string;
  name: string;
}

const STORAGE_KEY = 'ews_auth';

export const login = (email: string, password: string): Promise<User | null> => {
  return new Promise((resolve) => {
    // Hardcoded credentials for demo
    if (email === 'user@yesbnak.in' && password === 'password') {
      const user = { email, name: 'Yes Bank User' };
      localStorage.setItem(STORAGE_KEY, JSON.stringify(user));
      resolve(user);
    } else {
      resolve(null);
    }
  });
};

export const logout = (): void => {
  localStorage.removeItem(STORAGE_KEY);
  window.location.href = '/login';
};

export const getUser = (): User | null => {
  if (typeof window === 'undefined') return null;
  
  const userData = localStorage.getItem(STORAGE_KEY);
  if (!userData) return null;
  
  try {
    return JSON.parse(userData) as User;
  } catch (e) {
    return null;
  }
};

export const isAuthenticated = (): boolean => {
  return getUser() !== null;
};
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="public/placeholder-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="215" height="48" fill="none"><path fill="#000" d="M57.588 9.6h6L73.828 38h-5.2l-2.36-6.88h-11.36L52.548 38h-5.2l10.24-28.4Zm7.16 17.16-4.16-12.16-4.16 12.16h8.32Zm23.694-2.24c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.486-7.72.12 3.4c.534-1.227 1.307-2.173 2.32-2.84 1.04-.693 2.267-1.04 3.68-1.04 1.494 0 2.76.387 3.8 1.16 1.067.747 1.827 1.813 2.28 3.2.507-1.44 1.294-2.52 2.36-3.24 1.094-.747 2.414-1.12 3.96-1.12 1.414 0 2.64.307 3.68.92s1.84 1.52 2.4 2.72c.56 1.2.84 2.667.84 4.4V38h-4.96V25.92c0-1.813-.293-3.187-.88-4.12-.56-.96-1.413-1.44-2.56-1.44-.906 0-1.68.213-2.32.64-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.84-.48 3.04V38h-4.56V25.92c0-1.2-.133-2.213-.4-3.04-.24-.827-.626-1.453-1.16-1.88-.506-.427-1.133-.64-1.88-.64-.906 0-1.68.227-2.32.68-.64.427-1.133 1.053-1.48 1.88-.32.827-.48 1.827-.48 3V38h-4.96V16.8h4.48Zm26.723 10.6c0-2.24.427-4.187 1.28-5.84.854-1.68 2.067-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.84 0 3.494.413 4.96 1.24 1.467.827 2.64 2.08 3.52 3.76.88 1.653 1.347 3.693 1.4 6.12v1.32h-15.08c.107 1.813.614 3.227 1.52 4.24.907.987 2.134 1.48 3.68 1.48.987 0 1.88-.253 2.68-.76a4.803 4.803 0 0 0 1.84-2.2l5.08.36c-.64 2.027-1.84 3.64-3.6 4.84-1.733 1.173-3.733 1.76-6 1.76-2.08 0-3.906-.453-5.48-1.36-1.573-.907-2.786-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84Zm15.16-2.04c-.213-1.733-.76-3.013-1.64-3.84-.853-.827-1.893-1.24-3.12-1.24-1.44 0-2.6.453-3.48 1.36-.88.88-1.44 2.12-1.68 3.72h9.92ZM163.139 9.6V38h-5.04V9.6h5.04Zm8.322 7.2.24 5.88-.64-.36c.32-2.053 1.094-3.56 2.32-4.52 1.254-.987 2.787-1.48 4.6-1.48 2.32 0 4.107.733 5.36 2.2 1.254 1.44 1.88 3.387 1.88 5.84V38h-4.96V25.92c0-1.253-.12-2.28-.36-3.08-.24-.8-.64-1.413-1.2-1.84-.533-.427-1.253-.64-2.16-.64-1.44 0-2.573.48-3.4 1.44-.8.933-1.2 2.307-1.2 4.12V38h-4.96V16.8h4.48Zm30.003 7.72c-.186-1.307-.706-2.32-1.56-3.04-.853-.72-1.866-1.08-3.04-1.08-1.68 0-2.986.613-3.92 1.84-.906 1.227-1.36 2.947-1.36 5.16s.454 3.933 1.36 5.16c.934 1.227 2.24 1.84 3.92 1.84 1.254 0 2.307-.373 3.16-1.12.854-.773 1.387-1.867 1.6-3.28l5.12.24c-.186 1.68-.733 3.147-1.64 4.4-.906 1.227-2.08 2.173-3.52 2.84-1.413.667-2.986 1-4.72 1-2.08 0-3.906-.453-5.48-1.36-1.546-.907-2.76-2.2-3.64-3.88-.853-1.68-1.28-3.627-1.28-5.84 0-2.24.427-4.187 1.28-5.84.88-1.68 2.094-2.973 3.64-3.88 1.574-.907 3.4-1.36 5.48-1.36 1.68 0 3.227.32 4.64.96 1.414.64 2.56 1.56 3.44 2.76.907 1.2 1.454 2.6 1.64 4.2l-5.12.28Zm11.443 8.16V38h-5.6v-5.32h5.6Z"/><path fill="#171717" fill-rule="evenodd" d="m7.839 40.783 16.03-28.054L20 6 0 40.783h7.839Zm8.214 0H40L27.99 19.894l-4.02 7.032 3.976 6.914H20.02l-3.967 6.943Z" clip-rule="evenodd"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="next.config.mjs">
let userConfig = undefined
try {
  userConfig = await import('./v0-user-next.config')
} catch (e) {
  // ignore error
}

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  images: {
    unoptimized: true,
  },
  experimental: {
    webpackBuildWorker: true,
    parallelServerBuildTraces: true,
    parallelServerCompiles: true,
  },
}

mergeConfig(nextConfig, userConfig)

function mergeConfig(nextConfig, userConfig) {
  if (!userConfig) {
    return
  }

  for (const key in userConfig) {
    if (
      typeof nextConfig[key] === 'object' &&
      !Array.isArray(nextConfig[key])
    ) {
      nextConfig[key] = {
        ...nextConfig[key],
        ...userConfig[key],
      }
    } else {
      nextConfig[key] = userConfig[key]
    }
  }
}

export default nextConfig
</file>

<file path="postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="README.md">
# Early Warning Signal Dashboard

A comprehensive admin dashboard for managing and monitoring early warning signals for financial institutions. This application helps banks track dealer performance, monitor credit risks, and manage supply chain financing relationships.

<!-- Add a screenshot of your deployed application here -->
<!-- ![Early Warning Signal Dashboard](screenshot.png) -->

## Features

- **Authentication System**: Secure login with email/password authentication
- **Dark/Light Mode**: Toggle between dark and light themes for better user experience
- **Dashboard Overview**: Visual metrics and KPIs for quick monitoring
- **Master Data Management**:
  - Anchor Master: Manage anchor companies
  - Dealer Master: Manage dealer information and relationships
- **Monitoring Tools**:
  - Stop Supply: Track and manage dealers on stop supply
  - FLDG View: Monitor first loss default guarantees
  - Dealer Status: Real-time dealer performance tracking
- **Administration**:
  - Reports: Generate and view system reports
  - Templates: Manage email and notification templates
  - Configuration: System-wide settings and preferences

## Tech Stack

- **Frontend**: Next.js 14, React 18, Tailwind CSS
- **UI Components**: Shadcn UI
- **Authentication**: Custom authentication system with localStorage
- **Styling**: Tailwind CSS with custom theming
- **State Management**: React Context API

## Getting Started

### Prerequisites

- Node.js 18.17 or later
- npm or pnpm or yarn

### Installation

1. Clone the repository
   ```bash
   git clone https://github.com/MechanicalMaster/early-warning-signal.git
   cd early-warning-signal
   ```

2. Install dependencies
   ```bash
   npm install
   # or
   pnpm install
   # or
   yarn install
   ```

3. Start the development server
   ```bash
   npm run dev
   # or
   pnpm dev
   # or
   yarn dev
   ```

4. Open [http://localhost:3000](http://localhost:3000) in your browser

### Login Credentials

For demo purposes, use the following credentials:
- Email: user@yesbnak.in
- Password: password

## Deployment

The application is deployed on Vercel. For your own deployment:

1. Push your code to GitHub
2. Import the project in Vercel
3. Deploy with default settings

## Project Structure

```
early-warning-signal/
├── app/                      # Next.js app directory
│   ├── (dashboard)/          # Dashboard routes (protected)
│   ├── login/                # Login page
│   └── layout.tsx            # Root layout
├── components/               # React components
│   ├── ui/                   # UI components
│   └── ...                   # Feature components
├── lib/                      # Utility functions
│   ├── auth.ts               # Authentication utilities
│   └── utils.ts              # Helper functions
└── public/                   # Static assets
```

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- [Next.js](https://nextjs.org/)
- [Tailwind CSS](https://tailwindcss.com/)
- [Shadcn UI](https://ui.shadcn.com/)
- [Lucide Icons](https://lucide.dev/)
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "target": "ES6",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/(dashboard)/anchor-master/[id]/page.tsx">
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { ArrowLeft } from "lucide-react"
import Link from "next/link"
import { useState, use } from "react"

export default function EditAnchorPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params)
  
  // In a real app, you would fetch the anchor data based on the ID
  const [formData, setFormData] = useState({
    id: id,
    name: "Sample Anchor",
    industry: "Banking",
    status: "Active",
    psmName: "John Smith",
    programName: "Sample Program",
    programCustId: "PRG-SA-001",
    anchorCustId: "ANC12345",
    region: "Mumbai",
    phone: "+1234567890",
    address: "123 Main St",
    anchorEmails: ["contact@example.com"],
    stopSupplyRule: "rule1",
    fldgInvocationRule: "standard",
    buRmEmail: "",
    reviewRules: "rule1",
    stopSupplyEmail: "john.smith@example.com",
    fldgInvocationEmail: ""
  })

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target
    setFormData(prev => ({ ...prev, [id]: value }))
  }

  const handleSelectChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // In a real app, you would submit the form data to your API
    console.log("Updated anchor data:", formData)
  }

  return (
    <div className="flex flex-col gap-4">
      <div className="flex items-center gap-4">
        <Link href="/anchor-master">
          <Button variant="ghost" size="icon">
            <ArrowLeft className="h-4 w-4" />
          </Button>
        </Link>
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Edit Anchor</h1>
          <p className="text-muted-foreground">Update anchor details and configurations</p>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Anchor Details</CardTitle>
          <CardDescription>Update the anchor's information and settings</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="grid gap-6">
            <div className="grid gap-4">
              <div className="space-y-2">
                <Label htmlFor="id">Anchor ID</Label>
                <Input id="id" value={formData.id} disabled className="bg-muted" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="name">Anchor Name</Label>
                <Input id="name" value={formData.name} disabled className="bg-muted" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="anchorCustId">Anchor Cust ID</Label>
                <Input 
                  id="anchorCustId" 
                  value={formData.anchorCustId}
                  onChange={handleChange}
                  placeholder="ANC12345"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="programName">Program Name</Label>
                <Input 
                  id="programName" 
                  value={formData.programName}
                  onChange={handleChange}
                  placeholder="Supply Chain Finance Program"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="programCustId">Program Cust ID</Label>
                <Input 
                  id="programCustId" 
                  value={formData.programCustId}
                  onChange={handleChange}
                  placeholder="PRG-001"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="region">Region</Label>
                <Input 
                  id="region" 
                  value={formData.region}
                  onChange={handleChange}
                  placeholder="Mumbai"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="status">Status</Label>
                <Select 
                  value={formData.status} 
                  onValueChange={(value) => handleSelectChange("status", value)}
                >
                  <SelectTrigger id="status">
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Active">Active</SelectItem>
                    <SelectItem value="Inactive">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="psmName">PSM Name</Label>
                <Input 
                  id="psmName" 
                  value={formData.psmName}
                  onChange={handleChange}
                  placeholder="John Smith"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="buRmEmail">BU RM Email</Label>
                <Input 
                  id="buRmEmail" 
                  type="email" 
                  value={formData.buRmEmail}
                  onChange={handleChange}
                  placeholder="bu.rm@example.com"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="reviewRules">Review Rules</Label>
                <Select 
                  value={formData.reviewRules}
                  onValueChange={(value) => handleSelectChange("reviewRules", value)}
                >
                  <SelectTrigger id="reviewRules">
                    <SelectValue placeholder="Select review rule" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="rule1">Rule 1</SelectItem>
                    <SelectItem value="rule2">Rule 2</SelectItem>
                    <SelectItem value="rule3">Rule 3</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="stopSupplyEmail">Stop Supply Email</Label>
                <Input 
                  id="stopSupplyEmail" 
                  type="email" 
                  value={formData.stopSupplyEmail}
                  onChange={handleChange}
                  placeholder="stop.supply@example.com"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="fldgInvocationEmail">FLDG Invocation Email</Label>
                <Input 
                  id="fldgInvocationEmail" 
                  type="email" 
                  value={formData.fldgInvocationEmail}
                  onChange={handleChange}
                  placeholder="fldg.invocation@example.com"
                  required 
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="stopSupplyRule">Stop Supply Rules</Label>
                <Select 
                  value={formData.stopSupplyRule}
                  onValueChange={(value) => handleSelectChange("stopSupplyRule", value)}
                >
                  <SelectTrigger id="stopSupplyRule">
                    <SelectValue placeholder="Select stop supply rule" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="rule1">Rule 1 (7 days reminder, 3 days stop)</SelectItem>
                    <SelectItem value="rule2">Rule 2 (5 days reminder, 2 days stop)</SelectItem>
                    <SelectItem value="custom">Custom Rule</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="fldgInvocationRule">FLDG Invocation Rules</Label>
                <Select 
                  value={formData.fldgInvocationRule}
                  onValueChange={(value) => handleSelectChange("fldgInvocationRule", value)}
                >
                  <SelectTrigger id="fldgInvocationRule">
                    <SelectValue placeholder="Select FLDG invocation rule" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="standard">Standard (30 days)</SelectItem>
                    <SelectItem value="expedited">Expedited (15 days)</SelectItem>
                    <SelectItem value="extended">Extended (45 days)</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter>
          <Button onClick={handleSubmit}>Save Changes</Button>
        </CardFooter>
      </Card>
    </div>
  )
}
</file>

<file path="app/(dashboard)/reports/page.tsx">
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  FileText,
  Download,
  Calendar,
  BarChart,
  PieChart,
  Filter,
  Store,
  Wallet,
  Shield,
  Anchor,
  AlertOctagon,
} from "lucide-react"
import { DatePickerWithRange } from "@/components/date-range-picker"

export default function ReportsPage() {
  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Reports</h1>
        <p className="text-muted-foreground">Generate and download various reports</p>
      </div>

      <Tabs defaultValue="standard" className="space-y-4">
        <TabsList>
          <TabsTrigger value="standard">
            <FileText className="h-4 w-4 mr-2" />
            Standard Reports
          </TabsTrigger>
          <TabsTrigger value="scheduled">
            <Calendar className="h-4 w-4 mr-2" />
            Scheduled Reports
          </TabsTrigger>
        </TabsList>

        <TabsContent value="standard" className="space-y-4">
          <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
            {standardReports.map((report, index) => (
              <Card key={index}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {report.icon}
                    {report.title}
                  </CardTitle>
                  <CardDescription>{report.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label>Date Range</Label>
                      <DatePickerWithRange />
                    </div>
                    {report.additionalFilters && (
                      <div className="space-y-2">
                        <Label>Additional Filters</Label>
                        <Select>
                          <SelectTrigger>
                            <SelectValue placeholder="Select filter" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All</SelectItem>
                            <SelectItem value="active">Active Only</SelectItem>
                            <SelectItem value="inactive">Inactive Only</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    )}
                  </div>
                </CardContent>
                <CardFooter>
                  <Button className="w-full gap-2">
                    <Download className="h-4 w-4" />
                    Generate Report
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="scheduled" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Scheduled Reports</CardTitle>
              <CardDescription>Set up reports to be automatically generated and sent</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="scheduledReport">Report Type</Label>
                <Select defaultValue="dealer-summary">
                  <SelectTrigger id="scheduledReport">
                    <SelectValue placeholder="Select report type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="dealer-summary">Dealer Summary</SelectItem>
                    <SelectItem value="transaction-summary">Transaction Summary</SelectItem>
                    <SelectItem value="fldg-status">FLDG Status</SelectItem>
                    <SelectItem value="anchor-performance">Anchor Performance</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="frequency">Frequency</Label>
                <Select defaultValue="weekly">
                  <SelectTrigger id="frequency">
                    <SelectValue placeholder="Select frequency" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="daily">Daily</SelectItem>
                    <SelectItem value="weekly">Weekly</SelectItem>
                    <SelectItem value="monthly">Monthly</SelectItem>
                    <SelectItem value="quarterly">Quarterly</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="recipients">Recipients</Label>
                <Input id="recipients" placeholder="Enter email addresses (comma separated)" />
              </div>

              <div className="space-y-2">
                <Label htmlFor="format">Format</Label>
                <Select defaultValue="excel">
                  <SelectTrigger id="format">
                    <SelectValue placeholder="Select format" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="excel">Excel</SelectItem>
                    <SelectItem value="pdf">PDF</SelectItem>
                    <SelectItem value="csv">CSV</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Cancel</Button>
              <Button>Schedule Report</Button>
            </CardFooter>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Currently Scheduled Reports</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {scheduledReports.map((report, index) => (
                  <div key={index} className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-medium">{report.name}</h3>
                      <p className="text-sm text-muted-foreground">
                        {report.frequency} • {report.format} • {report.recipients}
                      </p>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">
                        Edit
                      </Button>
                      <Button variant="outline" size="sm" className="text-red-500 hover:text-red-600">
                        Delete
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

const standardReports = [
  {
    title: "Dealer Summary",
    description: "Overview of all dealers, their status, and key metrics",
    icon: <Store className="h-4 w-4" />,
    additionalFilters: true,
  },
  {
    title: "Transaction Report",
    description: "Detailed report of all transactions within a period",
    icon: <Wallet className="h-4 w-4" />,
    additionalFilters: true,
  },
  {
    title: "FLDG Status Report",
    description: "Current status of FLDG across all anchors",
    icon: <Shield className="h-4 w-4" />,
    additionalFilters: false,
  },
  {
    title: "Anchor Performance",
    description: "Performance metrics for all anchors",
    icon: <Anchor className="h-4 w-4" />,
    additionalFilters: true,
  },
  {
    title: "Stop Supply Analysis",
    description: "Analysis of dealers with stop supply status",
    icon: <AlertOctagon className="h-4 w-4" />,
    additionalFilters: false,
  },
  {
    title: "Credit Utilization",
    description: "Credit limit utilization across dealers",
    icon: <PieChart className="h-4 w-4" />,
    additionalFilters: true,
  },
]

const scheduledReports = [
  {
    name: "Weekly Dealer Summary",
    frequency: "Every Monday at 8:00 AM",
    format: "Excel",
    recipients: "finance@sambo.com, management@sambo.com",
  },
  {
    name: "Monthly FLDG Status",
    frequency: "1st of every month at 7:00 AM",
    format: "PDF",
    recipients: "risk@sambo.com, ceo@sambo.com",
  },
  {
    name: "Daily Transaction Summary",
    frequency: "Every day at 6:00 AM",
    format: "CSV",
    recipients: "operations@sambo.com",
  },
]
</file>

<file path="app/(dashboard)/settings/page.tsx">
import { redirect } from "next/navigation"
 
export default function SettingsPage() {
  redirect("/settings/profile")
}
</file>

<file path="app/(dashboard)/users/[id]/page.tsx">
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ArrowLeft, UserCog, Wallet, History, Shield, AlertTriangle } from "lucide-react"
import Link from "next/link"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { UserTransactions } from "@/components/user-transactions"

export default function UserProfilePage({ params }: { params: { id: string } }) {
  // In a real app, you would fetch the user data based on the ID
  const user = users.find((u) => u.id === params.id) || users[0]

  return (
    <div className="flex flex-col gap-4">
      <div className="flex items-center gap-2">
        <Button variant="ghost" size="icon" asChild>
          <Link href="/users">
            <ArrowLeft className="h-4 w-4" />
          </Link>
        </Button>
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            {user.name} {user.surname}
          </h1>
          <p className="text-muted-foreground">User profile and account management</p>
        </div>
      </div>

      <Tabs defaultValue="profile" className="space-y-4">
        <TabsList>
          <TabsTrigger value="profile">
            <UserCog className="h-4 w-4 mr-2" />
            Profile
          </TabsTrigger>
          <TabsTrigger value="wallet">
            <Wallet className="h-4 w-4 mr-2" />
            Wallet
          </TabsTrigger>
          <TabsTrigger value="transactions">
            <History className="h-4 w-4 mr-2" />
            Transactions
          </TabsTrigger>
          <TabsTrigger value="security">
            <Shield className="h-4 w-4 mr-2" />
            Security
          </TabsTrigger>
        </TabsList>

        <TabsContent value="profile">
          <Card>
            <CardHeader>
              <CardTitle>Profile Information</CardTitle>
              <CardDescription>View and update user profile details</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="firstName">First Name</Label>
                  <Input id="firstName" defaultValue={user.name} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="surname">Surname</Label>
                  <Input id="surname" defaultValue={user.surname} />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" defaultValue={user.email} />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone">Phone Number</Label>
                  <Input id="phone" defaultValue={user.phone} />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="idType">ID Type</Label>
                  <Select defaultValue={user.idType}>
                    <SelectTrigger id="idType">
                      <SelectValue placeholder="Select ID type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ID">ID</SelectItem>
                      <SelectItem value="Passport">Passport</SelectItem>
                      <SelectItem value="Asylum Seeker">Asylum Seeker</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status">Account Status</Label>
                  <Select defaultValue={user.status}>
                    <SelectTrigger id="status">
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Active">Active</SelectItem>
                      <SelectItem value="Pending">Pending</SelectItem>
                      <SelectItem value="Suspended">Suspended</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Reset</Button>
              <Button>Save Changes</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="wallet">
          <Card>
            <CardHeader>
              <CardTitle>Wallet Information</CardTitle>
              <CardDescription>Manage user wallet and balance</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Current Balance</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">₹ {user.balance.toFixed(2)}</div>
                    <p className="text-xs text-muted-foreground">Last updated: Today at 12:34 PM</p>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="pb-2">
                    <CardTitle className="text-sm font-medium">Wallet Status</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{user.walletStatus}</div>
                    <p className="text-xs text-muted-foreground">Created: {user.walletCreated}</p>
                  </CardContent>
                </Card>
              </div>

              <div className="space-y-2">
                <Label htmlFor="topup">Top Up Wallet</Label>
                <div className="flex gap-2">
                  <Input id="topup" type="number" placeholder="Amount in ZAR" />
                  <Button>Add Funds</Button>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline" className="gap-2">
                <AlertTriangle className="h-4 w-4" />
                Freeze Wallet
              </Button>
              <Button>Save Changes</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="transactions">
          <Card>
            <CardHeader>
              <CardTitle>Transaction History</CardTitle>
              <CardDescription>View all transactions for this user</CardDescription>
            </CardHeader>
            <CardContent>
              <UserTransactions userId={params.id} />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>Manage user security and access</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="resetPassword">Reset Password</Label>
                <div className="flex gap-2">
                  <Button variant="outline" className="w-full">
                    Send Reset Link
                  </Button>
                  <Button className="w-full">Generate Temporary Password</Button>
                </div>
              </div>

              <div className="space-y-2">
                <Label>Two-Factor Authentication</Label>
                <div className="flex items-center justify-between rounded-lg border p-4">
                  <div className="space-y-0.5">
                    <div className="font-medium">2FA Status</div>
                    <div className="text-sm text-muted-foreground">
                      {user.twoFactorEnabled ? "Enabled" : "Disabled"}
                    </div>
                  </div>
                  <Button variant={user.twoFactorEnabled ? "destructive" : "outline"}>
                    {user.twoFactorEnabled ? "Disable" : "Enable"}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

const users = [
  {
    id: "1",
    name: "Thabo",
    surname: "Mbeki",
    email: "thabo.mbeki@example.com",
    idType: "ID",
    phone: "+27 71 234 5678",
    status: "Active",
    balance: 1250.75,
    walletStatus: "Active",
    walletCreated: "2023-05-12",
    twoFactorEnabled: false,
  },
  {
    id: "2",
    name: "Nomzamo",
    surname: "Mbatha",
    email: "nomzamo.mbatha@example.com",
    idType: "Passport",
    phone: "+27 82 345 6789",
    status: "Active",
    balance: 3450.5,
    walletStatus: "Active",
    walletCreated: "2023-06-18",
    twoFactorEnabled: true,
  },
  {
    id: "3",
    name: "Siya",
    surname: "Kolisi",
    email: "siya.kolisi@example.com",
    idType: "ID",
    phone: "+27 63 456 7890",
    status: "Active",
    balance: 5678.25,
    walletStatus: "Active",
    walletCreated: "2023-04-30",
    twoFactorEnabled: false,
  },
  {
    id: "4",
    name: "Bonang",
    surname: "Matheba",
    email: "bonang.matheba@example.com",
    idType: "ID",
    phone: "+27 74 567 8901",
    status: "Pending",
    balance: 0.0,
    walletStatus: "Pending",
    walletCreated: "2023-08-05",
    twoFactorEnabled: false,
  },
  {
    id: "5",
    name: "Trevor",
    surname: "Noah",
    email: "trevor.noah@example.com",
    idType: "Passport",
    phone: "+27 85 678 9012",
    status: "Active",
    balance: 12500.0,
    walletStatus: "Active",
    walletCreated: "2023-02-14",
    twoFactorEnabled: true,
  },
]
</file>

<file path="app/landing/page.tsx">
import Link from 'next/link';
import Image from 'next/image'; // Import Image component
import FeatureSection from '@/components/FeatureSection'; // Import FeatureSection

export default function LandingPage() {
  return (
    <div className="flex flex-col min-h-screen bg-gray-100 text-gray-800">
      <header className="w-full py-4 px-8 bg-white shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center">
            {/* Placeholder for a logo */}
            <Image src="/placeholder-logo.svg" alt="App Logo" width={40} height={40} />
            <span className="ml-3 text-2xl font-semibold">OurApp</span>
          </div>
          <nav>
            <Link href="/login" legacyBehavior>
              <a className="px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition duration-300">
                Login
              </a>
            </Link>
          </nav>
        </div>
      </header>
      <main className="flex flex-col items-center justify-center flex-grow p-8 text-center">
        <h1 className="text-5xl font-bold mb-6">
          Early Warning Signal (EWS) for Supply Chain Finance.
        </h1>
        <p className="text-xl mb-8 max-w-md">
          Proactively Monitor and Manage Your Supply Chain Finance Portfolio.
        </p>
        <Link href="/login" legacyBehavior>
          <a className="px-8 py-3 bg-blue-600 text-white text-lg font-semibold rounded-md hover:bg-blue-700 transition duration-300">
            Get Started
          </a>
        </Link>
      </main>
      <footer className="w-full py-4 px-8 text-center bg-gray-200">
        <p className="text-sm text-gray-600">&copy; 2024 OurApp. All rights reserved.</p>
      </footer>
    </div>
  );
}
</file>

<file path="app/layout.tsx">
import type React from "react"
import type { Metadata } from "next"
import { Inter } from "next/font/google"
import "./globals.css"
import { SidebarProvider } from "@/components/sidebar-provider"
import { AuthProvider } from "@/components/auth-provider"
import { ThemeProvider } from "@/components/theme-provider"

const inter = Inter({ subsets: ["latin"] })

export const metadata: Metadata = {
  title: "Early Warning Signal Dashboard",
  description: "Admin dashboard for Early Warning Signal management",
    generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <AuthProvider>
        <SidebarProvider>{children}</SidebarProvider>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  )
}
</file>

<file path="app/page.tsx">
import LandingPage from "./landing/page";

export default function RootPage() {
  return <LandingPage />;
}
</file>

<file path="components/auth-provider.tsx">
"use client"

import { useEffect, useState } from "react"
import { usePathname, useRouter } from "next/navigation"
import { isAuthenticated } from "@/lib/auth"

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [isLoading, setIsLoading] = useState(true)
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    const publicPaths = ["/login", "/"]; // Added root path
    // Skip auth check for login page and landing page
    if (publicPaths.includes(pathname)) {
      setIsLoading(false)
      return
    }

    // Check if user is authenticated
    if (!isAuthenticated()) {
      router.push("/login")
    } else {
      setIsLoading(false)
    }
  }, [pathname, router])

  // Show nothing while checking authentication for protected routes
  const publicPathsForLoading = ["/login", "/"]; // Added root path
  if (isLoading && !publicPathsForLoading.includes(pathname)) {
    return (
      <div className="flex min-h-screen items-center justify-center">
        <div className="h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent"></div>
      </div>
    )
  }

  return <>{children}</>
}
</file>

<file path="components/edit-anchor-dialog.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Edit, Plus, X } from "lucide-react"

export type Anchor = {
  id: string
  name: string
  industry: string
  contactPerson: string
  email: string
  status: string
  phone?: string
  address?: string
  psmEmail?: string
  anchorEmails?: string[]
  stopSupplyRule?: string
  fldgInvocationRule?: string
}

export function EditAnchorDialog({ anchor }: { anchor: Anchor }) {
  const [open, setOpen] = useState(false)
  const [formData, setFormData] = useState<Anchor>({ 
    ...anchor,
    psmEmail: anchor.psmEmail || "",
    anchorEmails: anchor.anchorEmails || [anchor.email || ""],
    stopSupplyRule: anchor.stopSupplyRule || "rule1",
    fldgInvocationRule: anchor.fldgInvocationRule || "standard"
  })
  const [newEmail, setNewEmail] = useState("")

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target
    setFormData((prev) => ({ ...prev, [id]: value }))
  }

  const handleSelectChange = (field: string, value: string) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const handleAddEmail = () => {
    if (newEmail && !formData.anchorEmails?.includes(newEmail)) {
      setFormData((prev) => ({
        ...prev,
        anchorEmails: [...(prev.anchorEmails || []), newEmail]
      }))
      setNewEmail("")
    }
  }

  const handleRemoveEmail = (email: string) => {
    setFormData((prev) => ({
      ...prev,
      anchorEmails: prev.anchorEmails?.filter(e => e !== email) || []
    }))
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    // In a real app, you would submit the form data to your API
    console.log("Updated anchor data:", formData)
    setOpen(false)
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Edit className="h-4 w-4" />
          <span className="sr-only">Edit {anchor.name}</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Edit Anchor: {anchor.name}</DialogTitle>
          <DialogDescription>
            Make changes to the anchor details. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="id">Anchor ID</Label>
              <Input id="id" value={formData.id} disabled className="bg-muted" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="name">Anchor Name</Label>
              <Input id="name" value={formData.name} disabled className="bg-muted" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="status">Status</Label>
              <Select 
                value={formData.status} 
                onValueChange={(value) => handleSelectChange("status", value)}
              >
                <SelectTrigger id="status">
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Active">Active</SelectItem>
                  <SelectItem value="Inactive">Inactive</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="contactPerson">PSM Name</Label>
              <Input 
                id="contactPerson" 
                value={formData.contactPerson} 
                onChange={handleChange} 
                required 
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="psmEmail">PSM Email</Label>
              <Input 
                id="psmEmail" 
                type="email" 
                value={formData.psmEmail || ""} 
                onChange={handleChange} 
                placeholder="psm@example.com"
                required 
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="stopSupplyRule">Stop Supply Rules</Label>
              <Select 
                value={formData.stopSupplyRule} 
                onValueChange={(value) => handleSelectChange("stopSupplyRule", value)}
              >
                <SelectTrigger id="stopSupplyRule">
                  <SelectValue placeholder="Select stop supply rule" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="rule1">Rule 1 (7 days reminder, 3 days stop)</SelectItem>
                  <SelectItem value="rule2">Rule 2 (5 days reminder, 2 days stop)</SelectItem>
                  <SelectItem value="custom">Custom Rule</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="fldgInvocationRule">FLDG Invocation Rules</Label>
              <Select 
                value={formData.fldgInvocationRule} 
                onValueChange={(value) => handleSelectChange("fldgInvocationRule", value)}
              >
                <SelectTrigger id="fldgInvocationRule">
                  <SelectValue placeholder="Select FLDG invocation rule" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="standard">Standard (30 days)</SelectItem>
                  <SelectItem value="expedited">Expedited (15 days)</SelectItem>
                  <SelectItem value="extended">Extended (45 days)</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-3">
              <Label>Anchor Email Addresses</Label>
              <div className="space-y-2">
                {formData.anchorEmails?.map((email, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <Input 
                      value={email}
                      onChange={(e) => {
                        const newEmails = [...(formData.anchorEmails || [])];
                        newEmails[index] = e.target.value;
                        setFormData(prev => ({ ...prev, anchorEmails: newEmails }));
                      }}
                      type="email"
                      placeholder="anchor@example.com"
                    />
                    <Button 
                      type="button" 
                      variant="ghost" 
                      size="icon"
                      onClick={() => handleRemoveEmail(email)}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
              <div className="flex items-center gap-2">
                <Input
                  value={newEmail}
                  onChange={(e) => setNewEmail(e.target.value)}
                  type="email"
                  placeholder="Add new email address"
                />
                <Button 
                  type="button"
                  onClick={handleAddEmail}
                  variant="outline"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add
                </Button>
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">Save Changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="components/header.tsx">
"use client"

import { useSidebar } from "./sidebar-provider"
import { Bell, Search, User, Menu } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function Header() {
  const { toggle } = useSidebar()

  return (
    <header className="sticky top-0 z-40 border-b bg-background">
      <div className="flex h-14 items-center px-4 gap-4">
        <Button variant="ghost" size="icon" onClick={toggle}>
          <Menu className="h-5 w-5" />
          <span className="sr-only">Toggle sidebar</span>
        </Button>

        <div className="flex-1">
          <form>
            <div className="relative max-w-md">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Search..."
                className="w-full pl-8 sm:w-[300px] md:w-[200px] lg:w-[300px]"
              />
            </div>
          </form>
        </div>

        <Button variant="ghost" size="icon" className="h-8 w-8">
          <Bell className="h-4 w-4" />
          <span className="sr-only">Notifications</span>
        </Button>

        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="h-8 w-8 rounded-full">
              <User className="h-4 w-4" />
              <span className="sr-only">User menu</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>My Account</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem>Logout</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  )
}
</file>

<file path="components/portfolio-health-chart.tsx">
"use client"

import { useEffect, useState } from "react"
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  Legend, 
  ResponsiveContainer 
} from "recharts"

export function PortfolioHealthChart() {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return (
      <div className="flex items-center justify-center h-[350px] w-full bg-muted/20 rounded-md">
        <p className="text-muted-foreground">Loading chart...</p>
      </div>
    )
  }

  return (
    <div className="h-[350px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={portfolioData}
          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
        >
          <CartesianGrid strokeDasharray="3 3" vertical={false} />
          <XAxis dataKey="month" />
          <YAxis tickFormatter={(value: number) => `₹${(value/10000000).toFixed(1)}Cr`} />
          <Tooltip 
            formatter={(value: number, name: string) => {
              if (name === "utilisation") {
                return [`₹${(value/10000000).toFixed(2)}Cr`, "Utilisation"]
              } else if (name === "overdueRate") {
                return [`${value}%`, "Overdue Rate"]
              } else if (name === "riskExposure") {
                return [`₹${(value/10000000).toFixed(2)}Cr`, "Risk Exposure"]
              }
              return [value, name]
            }}
            contentStyle={{
              backgroundColor: "hsl(var(--background))",
              borderColor: "hsl(var(--border))",
              borderRadius: "var(--radius)",
            }}
          />
          <Legend />
          <Line type="monotone" dataKey="utilisation" name="Utilisation" stroke="#22c55e" strokeWidth={2} dot={false} />
          <Line type="monotone" dataKey="sanctionedLimit" name="Total Sanctioned Limit" stroke="#2563eb" strokeWidth={2} dot={false} />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
}

const portfolioData = [
  { month: 'Jan', utilisation: 40000000, sanctionedLimit: 60000000 },
  { month: 'Feb', utilisation: 42000000, sanctionedLimit: 62000000 },
  { month: 'Mar', utilisation: 45000000, sanctionedLimit: 65000000 },
  { month: 'Apr', utilisation: 47000000, sanctionedLimit: 67000000 },
  { month: 'May', utilisation: 49000000, sanctionedLimit: 70000000 },
  { month: 'Jun', utilisation: 51000000, sanctionedLimit: 72000000 },
  { month: 'Jul', utilisation: 53000000, sanctionedLimit: 75000000 },
  { month: 'Aug', utilisation: 55000000, sanctionedLimit: 77000000 },
  { month: 'Sep', utilisation: 57000000, sanctionedLimit: 80000000 },
  { month: 'Oct', utilisation: 59000000, sanctionedLimit: 82000000 },
  { month: 'Nov', utilisation: 61000000, sanctionedLimit: 85000000 },
  { month: 'Dec', utilisation: 63000000, sanctionedLimit: 87000000 },
]
</file>

<file path="components/user-transactions.tsx">
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { ArrowUpRight, ArrowDownLeft } from "lucide-react"
import { Card } from "@/components/ui/card"

export function UserTransactions({ userId }: { userId: string }) {
  // Filter transactions for this user
  const userTransactions = transactions.filter((t) => t.userId === userId)

  if (userTransactions.length === 0) {
    return <div className="text-center py-8 text-muted-foreground">No transactions found for this user.</div>
  }

  return (
    <div className="space-y-4">
      {userTransactions.map((transaction) => (
        <Card key={transaction.id} className="p-4">
          <div className="flex items-center">
            <Avatar className="h-9 w-9 border">
              {transaction.type === "credit" ? (
                <ArrowDownLeft className="h-4 w-4 text-green-500" />
              ) : (
                <ArrowUpRight className="h-4 w-4 text-red-500" />
              )}
              <AvatarFallback>{transaction.description[0]}</AvatarFallback>
            </Avatar>
            <div className="ml-4 space-y-1">
              <p className="text-sm font-medium leading-none">{transaction.description}</p>
              <p className="text-sm text-muted-foreground">
                {transaction.date} • {transaction.time}
              </p>
            </div>
            <div className={`ml-auto font-medium ${transaction.type === "credit" ? "text-green-500" : "text-red-500"}`}>
              {transaction.type === "credit" ? "+" : "-"}₹ {transaction.amount.toFixed(2)}
            </div>
          </div>
          <div className="mt-2 text-xs text-muted-foreground">Reference: {transaction.reference}</div>
        </Card>
      ))}
    </div>
  )
}

const transactions = [
  {
    id: "t1",
    userId: "1",
    description: "Salary Deposit",
    amount: 5000.0,
    date: "2023-11-14",
    time: "09:45 AM",
    type: "credit",
    reference: "SAL-NOV-2023",
  },
  {
    id: "t2",
    userId: "1",
    description: "Grocery Shopping",
    amount: 750.0,
    date: "2023-11-12",
    time: "02:30 PM",
    type: "debit",
    reference: "POS-CHECKERS-1234",
  },
  {
    id: "t3",
    userId: "1",
    description: "Electricity Bill",
    amount: 450.0,
    date: "2023-11-10",
    time: "10:15 AM",
    type: "debit",
    reference: "UTIL-ESKOM-5678",
  },
  {
    id: "t4",
    userId: "2",
    description: "Business Payment",
    amount: 12500.0,
    date: "2023-11-15",
    time: "11:20 AM",
    type: "credit",
    reference: "BUS-PAYMENT-9012",
  },
  {
    id: "t5",
    userId: "2",
    description: "Car Insurance",
    amount: 1200.0,
    date: "2023-11-05",
    time: "08:45 AM",
    type: "debit",
    reference: "INS-OUTSURANCE-3456",
  },
  {
    id: "t6",
    userId: "3",
    description: "Sponsorship Payment",
    amount: 25000.0,
    date: "2023-11-08",
    time: "03:15 PM",
    type: "credit",
    reference: "SPON-NIKE-7890",
  },
]
</file>

<file path="package.json">
{
  "name": "my-v0-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "^1.2.2",
    "@radix-ui/react-alert-dialog": "^1.1.4",
    "@radix-ui/react-aspect-ratio": "^1.1.1",
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-checkbox": "^1.1.3",
    "@radix-ui/react-collapsible": "^1.1.2",
    "@radix-ui/react-context-menu": "^2.2.4",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-hover-card": "^1.1.4",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-menubar": "^1.1.4",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-progress": "latest",
    "@radix-ui/react-radio-group": "^1.2.2",
    "@radix-ui/react-scroll-area": "^1.2.2",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slider": "^1.2.2",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-switch": "latest",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-toggle-group": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "latest",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.1.0",
    "next-themes": "^0.4.4",
    "react": "^19",
    "react-day-picker": "latest",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "latest",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  },
  "packageManager": "pnpm@10.10.0+sha512.d615db246fe70f25dcfea6d8d73dee782ce23e2245e3c4f6f888249fb568149318637dca73c2c5c8ef2a4ca0d5657fb9567188bfab47f566d1ee6ce987815c39"
}
</file>

<file path="app/(dashboard)/data-sync/page.tsx">
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { useState } from "react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import { ChevronDown, ChevronRight, Download, Check, AlertTriangle, Eye, RefreshCw } from "lucide-react"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"

export default function DataSyncPage() {
  const [selectedMaster, setSelectedMaster] = useState<string>("")
  const [fileName, setFileName] = useState<string>("")
  const [filePreviewOpen, setFilePreviewOpen] = useState(false)
  const [fileValid, setFileValid] = useState(false)
  const [viewDetailsOpen, setViewDetailsOpen] = useState(false)
  const [selectedFile, setSelectedFile] = useState<UploadHistoryItem | null>(null)

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setFileName(e.target.files[0].name)
      // Simulate file validation
      setFileValid(true)
      setFilePreviewOpen(true)
    }
  }

  // Handle view details click
  const handleViewDetails = (item: UploadHistoryItem) => {
    setSelectedFile(item)
    setViewDetailsOpen(true)
  }

  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Data Sync</h1>
        <p className="text-muted-foreground">Manage manual uploads and view automated sync history</p>
      </div>

      <Tabs defaultValue="manual" className="space-y-4">
        <TabsList>
          <TabsTrigger value="manual">Manual Update</TabsTrigger>
          <TabsTrigger value="automated">Automated Sync</TabsTrigger>
        </TabsList>

        <TabsContent value="manual" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Manual Data Upload</CardTitle>
              <CardDescription>Upload Excel files to update data manually</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Select Master</label>
                  <Select value={selectedMaster} onValueChange={setSelectedMaster}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a master" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="anchor">Anchor Master</SelectItem>
                      <SelectItem value="holiday">Holiday Master</SelectItem>
                      <SelectItem value="hierarchy">Hierarchy Master</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Choose File</label>
                  <div className="flex gap-4">
                    <Input 
                      type="file" 
                      accept=".xlsx,.xls" 
                      className="flex-1" 
                      onChange={handleFileChange}
                      disabled={!selectedMaster}
                    />
                    <Button disabled={!fileValid}>Upload</Button>
                  </div>
                  {fileName && <span className="text-sm text-muted-foreground">{fileName}</span>}
                </div>
              </div>
              
              {fileName && selectedMaster === "holiday" && (
                <Collapsible open={filePreviewOpen} onOpenChange={setFilePreviewOpen} className="border rounded-md">
                  <div className="flex items-center justify-between p-4">
                    <h3 className="text-sm font-medium">Preview</h3>
                    <CollapsibleTrigger asChild>
                      <Button variant="ghost" size="sm">
                        {filePreviewOpen ? (
                          <ChevronDown className="h-4 w-4" />
                        ) : (
                          <ChevronRight className="h-4 w-4" />
                        )}
                      </Button>
                    </CollapsibleTrigger>
                  </div>
                  <CollapsibleContent>
                    <div className="p-4 pt-0 space-y-4">
                      <div className="text-sm">
                        <span className="font-medium">Columns:</span> Holiday Date, Description
                      </div>
                      <div className="border rounded-md overflow-x-auto">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Holiday Date</TableHead>
                              <TableHead>Description</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            <TableRow>
                              <TableCell>2025-01-01</TableCell>
                              <TableCell>New Year's Day</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>2025-01-26</TableCell>
                              <TableCell>Republic Day</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>2025-02-14</TableCell>
                              <TableCell>Valentine's Day</TableCell>
                            </TableRow>
                          </TableBody>
                        </Table>
                      </div>
                      <div className="flex items-center gap-2">
                        {fileValid ? (
                          <>
                            <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                              <Check className="h-3 w-3 mr-1" />
                              File is valid for Holiday Master
                            </Badge>
                          </>
                        ) : (
                          <>
                            <Badge className="bg-red-100 text-red-800 hover:bg-red-100 font-medium" variant="outline">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              Missing column 'Holiday Date'
                            </Badge>
                          </>
                        )}
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              )}
              
              {fileName && selectedMaster === "hierarchy" && (
                <Collapsible open={filePreviewOpen} onOpenChange={setFilePreviewOpen} className="border rounded-md">
                  <div className="flex items-center justify-between p-4">
                    <h3 className="text-sm font-medium">Preview</h3>
                    <CollapsibleTrigger asChild>
                      <Button variant="ghost" size="sm">
                        {filePreviewOpen ? (
                          <ChevronDown className="h-4 w-4" />
                        ) : (
                          <ChevronRight className="h-4 w-4" />
                        )}
                      </Button>
                    </CollapsibleTrigger>
                  </div>
                  <CollapsibleContent>
                    <div className="p-4 pt-0 space-y-4">
                      <div className="text-sm">
                        <span className="font-medium">Columns:</span> Parent ID, Child ID, Name, Level
                      </div>
                      <div className="border rounded-md overflow-x-auto">
                        <Table>
                          <TableHeader>
                            <TableRow>
                              <TableHead>Parent ID</TableHead>
                              <TableHead>Child ID</TableHead>
                              <TableHead>Name</TableHead>
                              <TableHead>Level</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            <TableRow>
                              <TableCell>100</TableCell>
                              <TableCell>101</TableCell>
                              <TableCell>North Zone</TableCell>
                              <TableCell>1</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>101</TableCell>
                              <TableCell>102</TableCell>
                              <TableCell>Delhi Region</TableCell>
                              <TableCell>2</TableCell>
                            </TableRow>
                            <TableRow>
                              <TableCell>102</TableCell>
                              <TableCell>103</TableCell>
                              <TableCell>Connaught Place</TableCell>
                              <TableCell>3</TableCell>
                            </TableRow>
                          </TableBody>
                        </Table>
                      </div>
                      <div className="flex items-center gap-2">
                        {fileValid ? (
                          <>
                            <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                              <Check className="h-3 w-3 mr-1" />
                              File is valid for Hierarchy Master
                            </Badge>
                          </>
                        ) : (
                          <>
                            <Badge className="bg-red-100 text-red-800 hover:bg-red-100 font-medium" variant="outline">
                              <AlertTriangle className="h-3 w-3 mr-1" />
                              Missing column 'Parent ID'
                            </Badge>
                          </>
                        )}
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              )}
              
              <div className="mt-4">
                <h3 className="font-semibold mb-4">Upload History</h3>
                <div className="overflow-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Master</TableHead>
                        <TableHead>File Name</TableHead>
                        <TableHead>Uploaded By</TableHead>
                        <TableHead>Date</TableHead>
                        <TableHead>File Validation Status</TableHead>
                        <TableHead>DB Update Status</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {uploadHistory.map((item, index) => (
                        <TableRow key={index}>
                          <TableCell>{item.master}</TableCell>
                          <TableCell>{item.fileName}</TableCell>
                          <TableCell>{item.uploadedBy}</TableCell>
                          <TableCell>{item.date}</TableCell>
                          <TableCell>
                            <Badge 
                              className={item.validationStatus === "Valid" ? 
                                "bg-green-100 text-green-800 hover:bg-green-100" : 
                                "bg-red-100 text-red-800 hover:bg-red-100"} 
                              variant="outline"
                            >
                              {item.validationStatus}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <Badge 
                              className={item.dbUpdateStatus === "Success" ? 
                                "bg-green-100 text-green-800 hover:bg-green-100" : 
                                "bg-red-100 text-red-800 hover:bg-red-100"} 
                              variant="outline"
                            >
                              {item.dbUpdateStatus}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            <div className="flex gap-2">
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-8 px-2"
                                onClick={() => handleViewDetails(item)}
                              >
                                <Eye className="h-4 w-4 mr-1" />
                                View Details
                              </Button>
                              {item.dbUpdateStatus === "Failed" && (
                                <Button variant="outline" size="sm" className="h-8 px-2">
                                  <RefreshCw className="h-4 w-4 mr-1" />
                                  Retry
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="automated" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Automated Sync History</CardTitle>
              <CardDescription>View recent automated data sync events</CardDescription>
            </CardHeader>
            <CardContent className="overflow-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Time Slot</TableHead>
                    <TableHead>Email Subject</TableHead>
                    <TableHead>Expected Email Time</TableHead>
                    <TableHead>Email Receipt Status</TableHead>
                    <TableHead>Extraction Status</TableHead>
                    <TableHead>Data Points Updated</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {/* Header row for 08:00 AM Batch */}
                  <TableRow className="bg-muted/50">
                    <TableCell className="font-medium" colSpan={6}>
                      08:00 AM Batch
                    </TableCell>
                  </TableRow>
                  
                  {/* First entry */}
                  <TableRow>
                    <TableCell>08:00 AM</TableCell>
                    <TableCell>Scheduled Report Sales 2024-06-01</TableCell>
                    <TableCell>08:00 AM</TableCell>
                    <TableCell>
                      <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                        Received
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                        Success
                      </Badge>
                    </TableCell>
                    <TableCell>150</TableCell>
                  </TableRow>
                  
                  {/* Second entry */}
                  <TableRow>
                    <TableCell>08:00 AM</TableCell>
                    <TableCell>Scheduled Report Inventory 2024-06-01</TableCell>
                    <TableCell>08:00 AM</TableCell>
                    <TableCell>
                      <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                        Received
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                        Success
                      </Badge>
                    </TableCell>
                    <TableCell>120</TableCell>
                  </TableRow>
                  
                  {/* Header row for 12:00 PM Batch */}
                  <TableRow className="bg-muted/50">
                    <TableCell className="font-medium" colSpan={6}>
                      12:00 PM Batch
                    </TableCell>
                  </TableRow>
                  
                  {/* Third entry */}
                  <TableRow>
                    <TableCell>12:00 PM</TableCell>
                    <TableCell>Scheduled Report Sales 2024-05-31</TableCell>
                    <TableCell>12:00 PM</TableCell>
                    <TableCell>
                      <Badge className="bg-green-100 text-green-800 hover:bg-green-100 font-medium" variant="outline">
                        Received
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <Badge className="bg-red-100 text-red-800 hover:bg-red-100 font-medium" variant="outline">
                        Failed
                      </Badge>
                    </TableCell>
                    <TableCell>100</TableCell>
                  </TableRow>
                  
                  {/* Fourth entry */}
                  <TableRow>
                    <TableCell>12:00 PM</TableCell>
                    <TableCell>Scheduled Report Inventory 2024-05-31</TableCell>
                    <TableCell>12:00 PM</TableCell>
                    <TableCell>
                      <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-100 font-medium" variant="outline">
                        Missing
                      </Badge>
                    </TableCell>
                    <TableCell>-</TableCell>
                    <TableCell>-</TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* View Details Modal */}
      <Dialog open={viewDetailsOpen} onOpenChange={setViewDetailsOpen}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>File Details</DialogTitle>
            <DialogDescription>
              Detailed information about the uploaded file
            </DialogDescription>
          </DialogHeader>
          {selectedFile && (
            <div className="space-y-6">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h3 className="text-sm font-medium mb-1">File Name</h3>
                  <div className="flex items-center">
                    <span>{selectedFile.fileName}</span>
                    <Button variant="ghost" size="sm" className="ml-2">
                      <Download className="h-4 w-4 mr-1" />
                      Download
                    </Button>
                  </div>
                </div>
                <div>
                  <h3 className="text-sm font-medium mb-1">Master</h3>
                  <span>{selectedFile.master}</span>
                </div>
              </div>

              <div>
                <h3 className="text-sm font-medium mb-2">Preview</h3>
                <div className="border rounded-md overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Holiday Date</TableHead>
                        <TableHead>Description</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell>2025-01-01</TableCell>
                        <TableCell>New Year's Day</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>2025-01-26</TableCell>
                        <TableCell>Republic Day</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>2025-02-14</TableCell>
                        <TableCell>Valentine's Day</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>2025-03-02</TableCell>
                        <TableCell>Holi</TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>2025-04-18</TableCell>
                        <TableCell>Good Friday</TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </div>
              </div>

              {selectedFile.dbUpdateStatus === "Failed" && (
                <div>
                  <h3 className="text-sm font-medium mb-2">Error Log</h3>
                  <div className="bg-red-50 border border-red-200 text-red-800 p-3 rounded-md">
                    <p>DB Update Failed: Duplicate Holiday Date '2025-01-01'</p>
                  </div>
                </div>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}

// Types and sample data
interface UploadHistoryItem {
  master: string
  fileName: string
  uploadedBy: string
  date: string
  validationStatus: "Valid" | "Invalid"
  dbUpdateStatus: "Success" | "Failed"
}

const uploadHistory: UploadHistoryItem[] = [
  {
    master: "Anchor Master",
    fileName: "anchors_update.xlsx",
    uploadedBy: "admin@bank.com",
    date: "2024-06-01 10:30 AM",
    validationStatus: "Valid",
    dbUpdateStatus: "Success"
  },
  {
    master: "Holiday Master",
    fileName: "holidays_2025.xlsx",
    uploadedBy: "user@bank.com",
    date: "2024-05-28 14:15 PM",
    validationStatus: "Valid",
    dbUpdateStatus: "Failed"
  },
  {
    master: "Hierarchy Master",
    fileName: "hierarchy_sample.xlsx",
    uploadedBy: "admin@bank.com",
    date: "2024-06-02 11:00 AM",
    validationStatus: "Valid",
    dbUpdateStatus: "Success"
  }
]
</file>

<file path="app/(dashboard)/dashboard/page.tsx">
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  UsersIcon, 
  WalletIcon, 
  AlertTriangleIcon, 
  AlertCircleIcon, 
  BarChartIcon, 
  TrendingDownIcon, 
  PercentIcon,
  CalendarClockIcon,
  Anchor as AnchorIcon
} from "lucide-react"
import { PortfolioHealthChart } from "@/components/portfolio-health-chart"
import { TopAnchors } from "@/components/top-anchors"

export default function DashboardPage() {
  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Dashboard</h1>
        <p className="text-muted-foreground">Portfolio health overview and early warning indicators</p>
      </div>

      <Tabs defaultValue="daily" className="space-y-4">
        <div className="flex items-center justify-between">
          <TabsList>
            <TabsTrigger value="daily">Daily</TabsTrigger>
            <TabsTrigger value="last7days">Last 7 days</TabsTrigger>
            <TabsTrigger value="monthly">Last Month</TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="daily" className="space-y-4">
          <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Utilisation</CardTitle>
                <BarChartIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">₹ 56,32,18,543</div>
                <p className="text-xs text-muted-foreground">+4.3% from yesterday</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Dealers</CardTitle>
                <UsersIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">1,284</div>
                <p className="text-xs text-muted-foreground">+5 new since yesterday</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Anchors</CardTitle>
                <AnchorIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">20</div>
                <p className="text-xs text-muted-foreground">+1 new since yesterday</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Sanctioned Limit</CardTitle>
                <WalletIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">₹ 80,00,00,000</div>
                <p className="text-xs text-muted-foreground">+2.1% from yesterday</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="last7days" className="space-y-4">
          <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Utilisation</CardTitle>
                <BarChartIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">₹ 12,45,67,890</div>
                <p className="text-xs text-muted-foreground">+5.1% from last week</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Dealers</CardTitle>
                <UsersIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">1,284</div>
                <p className="text-xs text-muted-foreground">+12 new in last 7 days</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Anchors</CardTitle>
                <AnchorIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">20</div>
                <p className="text-xs text-muted-foreground">+2 in last 7 days</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Sanctioned Limit</CardTitle>
                <WalletIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">₹ 82,00,00,000</div>
                <p className="text-xs text-muted-foreground">+1.5% from last week</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="monthly" className="space-y-4">
          <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-4">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Utilisation</CardTitle>
                <BarChartIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">₹ 48,92,75,000</div>
                <p className="text-xs text-muted-foreground">+15.2% from last month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Dealers</CardTitle>
                <UsersIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">1,284</div>
                <p className="text-xs text-muted-foreground">+52 from last month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Anchors</CardTitle>
                <AnchorIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">20</div>
                <p className="text-xs text-muted-foreground">+5 from last month</p>
              </CardContent>
            </Card>
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Sanctioned Limit</CardTitle>
                <WalletIcon className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">₹ 1,00,00,00,000</div>
                <p className="text-xs text-muted-foreground">+8.7% from last month</p>
              </CardContent>
            </Card>
          </div>
        </TabsContent>
      </Tabs>

      <div className="grid gap-4 grid-cols-1 lg:grid-cols-7">
        <Card className="lg:col-span-4">
          <CardHeader>
            <CardTitle>Portfolio Health Trend</CardTitle>
            <CardDescription>Utilisation and risk metrics over time</CardDescription>
          </CardHeader>
          <CardContent className="pl-2">
            <PortfolioHealthChart />
          </CardContent>
        </Card>

        <Card className="lg:col-span-3">
          <CardHeader>
            <CardTitle>Top Anchors</CardTitle>
            <CardDescription>Anchors with highest portfolio value or dealer count</CardDescription>
          </CardHeader>
          <CardContent>
            <TopAnchors />
          </CardContent>
        </Card>
      </div>

      <div className="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Overdue Dealers</CardTitle>
            <AlertTriangleIcon className="h-4 w-4 text-red-500" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">42</div>
            <p className="text-xs text-red-500">+8 from last week</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Overdue Amount</CardTitle>
            <WalletIcon className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">₹ 2,15,30,000</div>
            <p className="text-xs text-muted-foreground">15% of overdue portfolio</p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Inactive Dealers</CardTitle>
            <UsersIcon className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">15</div>
            <p className="text-xs text-muted-foreground">-2 from last week</p>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
</file>

<file path="app/(dashboard)/dealer-master/page.tsx">
"use client"

import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search } from "lucide-react"
import { EditDealerMasterDialog, type DealerMaster } from "@/components/edit-dealer-master-dialog"
import { anchors } from "@/app/(dashboard)/anchor-master/page"
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "@/components/ui/pagination"

export default function DealerMasterPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Filter dealers based on search term
  const filteredDealers = useMemo(() => {
    if (!searchTerm) return dealers;
    
    return dealers.filter(dealer => 
      dealer.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
      dealer.dealerCustId.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm]);

  // Paginate the filtered dealers
  const paginatedDealers = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredDealers.slice(startIndex, endIndex);
  }, [filteredDealers, currentPage]);

  // Calculate total pages
  const totalPages = Math.ceil(filteredDealers.length / itemsPerPage);

  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Dealer Master</h1>
          <p className="text-muted-foreground">Manage dealer entities and their details</p>
        </div>
      </div>

      <Card>
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row sm:items-center gap-4">
            <div className="flex items-center gap-2 w-full max-w-sm">
              <Search className="h-4 w-4 text-muted-foreground" />
              <Input 
                placeholder="Search dealers..." 
                className="h-9" 
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setCurrentPage(1); // Reset to first page when searching
                }}
              />
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0 overflow-auto">
          <div className="w-full min-w-[640px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Dealer Cust ID</TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead>Anchor</TableHead>
                  <TableHead>Program Name</TableHead>
                  <TableHead>Program Cust ID</TableHead>
                  <TableHead>Credit Limit</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {paginatedDealers.map((dealer) => {
                  // Find the matching anchor to get anchorEmails
                  const matchingAnchor = anchors.find((a: { name: string }) => a.name === dealer.anchor);
                  const anchorEmails = matchingAnchor?.anchorEmails || [];
                  
                  return (
                    <TableRow key={dealer.id}>
                      <TableCell className="font-medium">{dealer.dealerCustId}</TableCell>
                      <TableCell>{dealer.name}</TableCell>
                      <TableCell>{dealer.anchor}</TableCell>
                      <TableCell>{dealer.programName}</TableCell>
                      <TableCell>{dealer.programCustId}</TableCell>
                      <TableCell>₹ {dealer.creditLimit.toLocaleString()}</TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-2">
                          <EditDealerMasterDialog dealer={dealer} anchorEmails={anchorEmails} />
                        </div>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </div>
          
          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-2 py-4">
              <Pagination>
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious 
                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                      className={currentPage === 1 ? "pointer-events-none opacity-50" : "cursor-pointer"}
                    />
                  </PaginationItem>
                  
                  {[...Array(totalPages)].map((_, i) => (
                    <PaginationItem key={i}>
                      <PaginationLink 
                        onClick={() => setCurrentPage(i + 1)}
                        isActive={currentPage === i + 1}
                      >
                        {i + 1}
                      </PaginationLink>
                    </PaginationItem>
                  ))}
                  
                  <PaginationItem>
                    <PaginationNext 
                      onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                      className={currentPage === totalPages ? "pointer-events-none opacity-50" : "cursor-pointer"}
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

const dealers: DealerMaster[] = [
  {
    id: "DLR001",
    dealerCustId: "RTLHDFC0001",
    name: "Reliance Retail",
    anchor: "Standard Bank",
    programName: "Standard Bank Supply Chain Finance",
    programCustId: "SCF-SB-001",
    contactPerson: "James Wilson",
    contactEmail: "james.wilson@standardbank.co.za",
    creditLimit: 500000,
    status: "Active",
    fldgInvocationEmails: ["finance@standardbank.co.za"],
    stopSupplyInvocationEmails: ["support@standardbank.co.za"]
  },
  {
    id: "DLR002",
    dealerCustId: "FLPSHOP0023",
    name: "Flipkart India",
    anchor: "Shoprite Holdings",
    programName: "Shoprite Distributor Finance",
    programCustId: "DF-SH-052",
    contactPerson: "Lerato Molefe",
    contactEmail: "l.molefe@shoprite.co.za",
    creditLimit: 750000,
    status: "Active",
    fldgInvocationEmails: ["retail@shoprite.co.za"],
    stopSupplyInvocationEmails: ["orders@shoprite.co.za"]
  },
  {
    id: "DLR003",
    dealerCustId: "AMZMTN0045",
    name: "Amazon Seller Services",
    anchor: "MTN Group",
    programName: "MTN Partner Program",
    programCustId: "PP-MTN-105",
    contactPerson: "Raj Patel",
    contactEmail: "raj.patel@mtn.com",
    creditLimit: 350000,
    status: "Inactive",
    fldgInvocationEmails: ["service@mtn.com"],
    stopSupplyInvocationEmails: ["corporate@mtn.com"]
  },
  {
    id: "DLR004",
    dealerCustId: "BIJSAS0078",
    name: "Bijou Electronics",
    anchor: "Sasol Limited",
    programName: "Sasol Vendor Financing",
    programCustId: "VF-SL-021",
    contactPerson: "Pieter van der Merwe",
    contactEmail: "pieter.merwe@sasol.com",
    creditLimit: 1000000,
    status: "Stop Supply",
    fldgInvocationEmails: ["energy@sasol.com"],
    stopSupplyInvocationEmails: ["energy@sasol.com"]
  },
  {
    id: "DLR005",
    dealerCustId: "TATDISC0089",
    name: "Tata Electronics",
    anchor: "Discovery Limited",
    programName: "Discovery Distribution Finance",
    programCustId: "DF-DL-067",
    contactPerson: "Nomsa Dlamini",
    contactEmail: "nomsa.d@discovery.co.za",
    creditLimit: 250000,
    status: "Active",
    fldgInvocationEmails: ["claims@discovery.co.za"],
    stopSupplyInvocationEmails: ["support@discovery.co.za"]
  },
  {
    id: "DLR006",
    dealerCustId: "BPLSTD0101",
    name: "Best Price Logistics",
    anchor: "Standard Bank",
    programName: "Standard Bank Supply Chain Finance",
    programCustId: "SCF-SB-001",
    contactPerson: "Peter Johnson",
    contactEmail: "p.johnson@standardbank.co.za",
    creditLimit: 350000,
    status: "Active",
    fldgInvocationEmails: ["finance@standardbank.co.za"],
    stopSupplyInvocationEmails: ["info@standardbank.co.za"]
  },
  {
    id: "DLR007",
    dealerCustId: "MYNSHOP0112",
    name: "Myntra Designs",
    anchor: "Shoprite Holdings",
    programName: "Shoprite Distributor Finance",
    programCustId: "DF-SH-052",
    contactPerson: "Lucy Mabaso",
    contactEmail: "l.mabaso@shoprite.co.za",
    creditLimit: 400000,
    status: "Active",
    fldgInvocationEmails: ["retail@shoprite.co.za"],
    stopSupplyInvocationEmails: ["orders@shoprite.co.za"]
  },
  {
    id: "DLR008",
    dealerCustId: "GRSMTN0135",
    name: "Grofers India",
    anchor: "MTN Group",
    programName: "MTN Partner Program",
    programCustId: "PP-MTN-105",
    contactPerson: "Thabo Nkosi",
    contactEmail: "t.nkosi@mtn.com",
    creditLimit: 250000,
    status: "Inactive",
    fldgInvocationEmails: ["service@mtn.com"],
    stopSupplyInvocationEmails: ["corporate@mtn.com"]
  },
  {
    id: "DLR009",
    dealerCustId: "BKSSAS0149",
    name: "Booksellers Network",
    anchor: "Sasol Limited",
    programName: "Sasol Vendor Financing",
    programCustId: "VF-SL-021",
    contactPerson: "Johan Meyer",
    contactEmail: "j.meyer@sasol.com",
    creditLimit: 120000,
    status: "Active",
    fldgInvocationEmails: ["energy@sasol.com"],
    stopSupplyInvocationEmails: ["energy@sasol.com"]
  },
  {
    id: "DLR010",
    dealerCustId: "APPDISC0153",
    name: "Appario Retail",
    anchor: "Discovery Limited",
    programName: "Discovery Distribution Finance",
    programCustId: "DF-DL-067",
    contactPerson: "Zandile Khumalo",
    contactEmail: "z.khumalo@discovery.co.za",
    creditLimit: 300000,
    status: "Active",
    fldgInvocationEmails: ["claims@discovery.co.za"],
    stopSupplyInvocationEmails: ["support@discovery.co.za"]
  },
  {
    id: "DLR011",
    dealerCustId: "URBSTD0169",
    name: "Urban Company",
    anchor: "Standard Bank",
    programName: "Standard Bank Supply Chain Finance",
    programCustId: "SCF-SB-001",
    contactPerson: "David Okello",
    contactEmail: "d.okello@standardbank.co.za",
    creditLimit: 280000,
    status: "Active",
    fldgInvocationEmails: ["finance@standardbank.co.za"],
    stopSupplyInvocationEmails: ["info@standardbank.co.za"]
  },
  {
    id: "DLR012",
    dealerCustId: "BIGSHOP0174",
    name: "BigBasket",
    anchor: "Shoprite Holdings",
    programName: "Shoprite Distributor Finance",
    programCustId: "DF-SH-052",
    contactPerson: "Thandi Ngcobo",
    contactEmail: "t.ngcobo@shoprite.co.za",
    creditLimit: 550000,
    status: "Inactive",
    fldgInvocationEmails: ["retail@shoprite.co.za"],
    stopSupplyInvocationEmails: ["orders@shoprite.co.za"]
  },
  {
    id: "DLR013",
    dealerCustId: "DMTMTN0188",
    name: "DMart",
    anchor: "MTN Group",
    programName: "MTN Partner Program",
    programCustId: "PP-MTN-105",
    contactPerson: "Sipho Zulu",
    contactEmail: "s.zulu@mtn.com",
    creditLimit: 600000,
    status: "Active",
    fldgInvocationEmails: ["service@mtn.com"],
    stopSupplyInvocationEmails: ["corporate@mtn.com"]
  },
  {
    id: "DLR014",
    dealerCustId: "SWGSAS0196",
    name: "Swiggy",
    anchor: "Sasol Limited",
    programName: "Sasol Vendor Financing",
    programCustId: "VF-SL-021",
    contactPerson: "Andre Venter",
    contactEmail: "a.venter@sasol.com",
    creditLimit: 450000,
    status: "Active",
    fldgInvocationEmails: ["energy@sasol.com"],
    stopSupplyInvocationEmails: ["energy@sasol.com"]
  },
  {
    id: "DLR015",
    dealerCustId: "ZOMDISC0205",
    name: "Zomato",
    anchor: "Discovery Limited",
    programName: "Discovery Distribution Finance",
    programCustId: "DF-DL-067",
    contactPerson: "Ayanda Mbeki",
    contactEmail: "a.mbeki@discovery.co.za",
    creditLimit: 380000,
    status: "Inactive",
    fldgInvocationEmails: ["claims@discovery.co.za"],
    stopSupplyInvocationEmails: ["support@discovery.co.za"]
  },
  {
    id: "DLR016",
    dealerCustId: "NYKASTD0217",
    name: "Nykaa",
    anchor: "Standard Bank",
    programName: "Standard Bank Supply Chain Finance",
    programCustId: "SCF-SB-001",
    contactPerson: "Thomas Brown",
    contactEmail: "t.brown@standardbank.co.za",
    creditLimit: 220000,
    status: "Active",
    fldgInvocationEmails: ["finance@standardbank.co.za", "info@standardbank.co.za"],
    stopSupplyInvocationEmails: ["support@standardbank.co.za"]
  },
  {
    id: "DLR017",
    dealerCustId: "LNSSHOP0229",
    name: "Lenskart",
    anchor: "Shoprite Holdings",
    programName: "Shoprite Distributor Finance",
    programCustId: "DF-SH-052",
    contactPerson: "Precious Moyo",
    contactEmail: "p.moyo@shoprite.co.za",
    creditLimit: 180000,
    status: "Active",
    fldgInvocationEmails: ["retail@shoprite.co.za"],
    stopSupplyInvocationEmails: ["orders@shoprite.co.za"]
  },
  {
    id: "DLR018",
    dealerCustId: "PHRMTN0234",
    name: "PharmEasy",
    anchor: "MTN Group",
    programName: "MTN Partner Program",
    programCustId: "PP-MTN-105",
    contactPerson: "Lindwe Sithole",
    contactEmail: "l.sithole@mtn.com",
    creditLimit: 250000,
    status: "Active",
    fldgInvocationEmails: ["service@mtn.com", "corporate@mtn.com"],
    stopSupplyInvocationEmails: ["service@mtn.com"]
  },
  {
    id: "DLR019",
    dealerCustId: "CRDSAS0246",
    name: "CarDekho",
    anchor: "Sasol Limited",
    programName: "Sasol Vendor Financing",
    programCustId: "VF-SL-021",
    contactPerson: "Willem Pretorius",
    contactEmail: "w.pretorius@sasol.com",
    creditLimit: 160000,
    status: "Inactive",
    fldgInvocationEmails: ["energy@sasol.com"],
    stopSupplyInvocationEmails: ["energy@sasol.com"]
  },
  {
    id: "DLR020",
    dealerCustId: "MMTDISC0251",
    name: "MakeMyTrip",
    anchor: "Discovery Limited",
    programName: "Discovery Distribution Finance",
    programCustId: "DF-DL-067",
    contactPerson: "Nandi Xaba",
    contactEmail: "n.xaba@discovery.co.za",
    creditLimit: 320000,
    status: "Active",
    fldgInvocationEmails: ["claims@discovery.co.za"],
    stopSupplyInvocationEmails: ["support@discovery.co.za"]
  }
]
</file>

<file path="app/(dashboard)/dealer-status/page.tsx">
"use client"

import { useState, useMemo, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, CheckCircle2, XCircle } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { EditDealerDialog, type Dealer } from "@/components/edit-dealer-dialog"
import { Badge } from "@/components/ui/badge"
import { Pagination, PaginationContent, PaginationItem } from "@/components/ui/pagination"

export default function DealerStatusPage() {
  const [activeTab, setActiveTab] = useState<string>("all");
  const [selectedAnchor, setSelectedAnchor] = useState<string>("all");
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Get unique anchor names for the filter dropdown
  const uniqueAnchors = useMemo(() => {
    return Array.from(new Set(dealerStatusData.map(dealer => dealer.anchor)));
  }, [dealerStatusData]);

  // Filter dealers based on active tab, anchor filter, and search term
  const filteredAndSearchedDealers = useMemo(() => {
    let tempDealers = dealerStatusData;

    // Filter by active tab
    if (activeTab === "inactive") {
      tempDealers = tempDealers.filter(d => d.status === "Inactive");
    }

    // Filter by selected anchor
    if (selectedAnchor !== "all") {
      tempDealers = tempDealers.filter(d => d.anchor === selectedAnchor);
    }

    // Filter by search term
    if (searchTerm) {
      tempDealers = tempDealers.filter(dealer =>
        dealer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        dealer.dealerCustId.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    return tempDealers;
  }, [dealerStatusData, activeTab, selectedAnchor, searchTerm]);

  // Paginate the filtered dealers
  const paginatedDealers = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredAndSearchedDealers.slice(startIndex, endIndex);
  }, [filteredAndSearchedDealers, currentPage, itemsPerPage]);

  // Calculate total pages for pagination
  const totalPages = Math.ceil(filteredAndSearchedDealers.length / itemsPerPage);

  // Reset to page 1 when filters change
  useEffect(() => {
    setCurrentPage(1);
  }, [activeTab, selectedAnchor, searchTerm]);

  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Credit Noting/ Dealer Status</h1>
        <p className="text-muted-foreground">Manage active and inactive dealers</p>
      </div>

      <Tabs 
        defaultValue={activeTab} 
        onValueChange={setActiveTab}
        className="space-y-4"
      >
        <div className="flex items-center justify-between">
          <TabsList>
            <TabsTrigger value="all">All Dealers</TabsTrigger>
            <TabsTrigger value="inactive">Inactive</TabsTrigger>
          </TabsList>
          <div className="flex items-center gap-2">
            <Select 
              value={selectedAnchor} 
              onValueChange={setSelectedAnchor}
            >
              <SelectTrigger className="w-[180px] h-9">
                <SelectValue placeholder="Filter by anchor" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Anchors</SelectItem>
                {uniqueAnchors.map((anchor) => (
                  <SelectItem key={anchor} value={anchor}>
                    {anchor}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <Card>
          <CardHeader className="p-4">
            <div className="flex flex-col sm:flex-row sm:items-center gap-4">
              <div className="flex items-center gap-2 w-full max-w-sm">
                <Search className="h-4 w-4 text-muted-foreground" />
                <Input 
                  placeholder="Search dealers..." 
                  className="h-9" 
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-0 overflow-auto">
            <div className="w-full min-w-[640px]">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Dealer Cust ID</TableHead>
                    <TableHead>Name</TableHead>
                    <TableHead>Anchor</TableHead>
                    <TableHead>Program Name</TableHead>
                    <TableHead>Program Cust ID</TableHead>
                    <TableHead>Sanctioned Limit</TableHead>
                    <TableHead>Utilised Limit</TableHead>
                    <TableHead>Utilisation %</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Smartfin Status</TableHead>
                    <TableHead>Last Updated</TableHead>
                    <TableHead className="text-right">Edit</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {paginatedDealers.map((dealer) => (
                    <TableRow key={dealer.id}>
                      <TableCell className="font-medium">{dealer.dealerCustId}</TableCell>
                      <TableCell>{dealer.name}</TableCell>
                      <TableCell>{dealer.anchor}</TableCell>
                      <TableCell>{dealer.programName}</TableCell>
                      <TableCell>{dealer.programCustId}</TableCell>
                      <TableCell>₹{dealer.sanctionedLimit.toLocaleString()}</TableCell>
                      <TableCell>₹{dealer.utilisedLimit.toLocaleString()}</TableCell>
                      <TableCell>{dealer.utilisationPercentage}%</TableCell>
                      <TableCell>
                        <div
                          className={`inline-flex items-center gap-2 rounded-full px-2.5 py-0.5 text-xs font-semibold ${
                            dealer.status === "Active"
                              ? "bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300"
                              : "bg-yellow-50 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-300"
                          }`}
                        >
                          {dealer.status === "Active" ? (
                            <CheckCircle2 className="h-3 w-3" />
                          ) : (
                            <XCircle className="h-3 w-3" />
                          )}
                          {dealer.status}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge 
                          variant={dealer.smartfinStatus === "Active" ? "default" : "outline"}
                          className={dealer.smartfinStatus === "Active" 
                            ? "bg-sky-100 text-sky-700 dark:bg-sky-900/30 dark:text-sky-300" 
                            : "bg-stone-100 text-stone-700 dark:bg-stone-700 dark:text-stone-300"}
                        >
                          {dealer.smartfinStatus}
                        </Badge>
                      </TableCell>
                      <TableCell>{dealer.lastUpdated}</TableCell>
                      <TableCell className="text-right">
                        <EditDealerDialog dealer={dealer} />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>

            {totalPages > 1 && (
              <div className="mt-4 flex justify-center py-4">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))} 
                        disabled={currentPage === 1}
                      >
                        Previous
                      </Button>
                    </PaginationItem>
                    {[...Array(totalPages)].map((_, i) => (
                      <PaginationItem key={i}>
                        <Button 
                          variant={currentPage === i + 1 ? "default" : "outline"} 
                          size="sm" 
                          onClick={() => setCurrentPage(i + 1)}
                        >
                          {i + 1}
                        </Button>
                      </PaginationItem>
                    ))}
                    <PaginationItem>
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))} 
                        disabled={currentPage === totalPages}
                      >
                        Next
                      </Button>
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            )}
          </CardContent>
        </Card>
      </Tabs>
    </div>
  )
}

const dealerStatusData: Dealer[] = [
  {
    id: "DLR001",
    dealerCustId: "RTLHDFC0001",
    name: "Reliance Retail",
    anchor: "HDFC Bank",
    programName: "HDFC Supply Chain Finance",
    programCustId: "SCF-HD-001",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-11-15",
    sanctionedLimit: 1000000,
    utilisedLimit: 750000,
    utilisationPercentage: 75,
  },
  {
    id: "DLR002",
    dealerCustId: "FLPIC0023",
    name: "Flipkart India",
    anchor: "ICICI Bank",
    programName: "ICICI Distributor Finance",
    programCustId: "DF-IC-052",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-11-14",
    sanctionedLimit: 5000000,
    utilisedLimit: 4250000,
    utilisationPercentage: 85,
  },
  {
    id: "DLR003",
    dealerCustId: "AMZAXS0045",
    name: "Amazon Seller Services",
    anchor: "Axis Bank",
    programName: "Axis Channel Finance",
    programCustId: "CF-AXB-045",
    status: "Inactive",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-11-10",
    sanctionedLimit: 7500000,
    utilisedLimit: 6000000,
    utilisationPercentage: 80,
  },
  {
    id: "DLR004",
    dealerCustId: "BIJSBI0078",
    name: "Bijou Electronics",
    anchor: "State Bank of India",
    programName: "SBI Supply Chain Finance",
    programCustId: "SCF-SBI-012",
    status: "Active",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-11-12",
    sanctionedLimit: 1500000,
    utilisedLimit: 900000,
    utilisationPercentage: 60,
  },
  {
    id: "DLR005",
    dealerCustId: "TATRIL0089",
    name: "Tata Electronics",
    anchor: "Reliance Industries",
    programName: "RIL Vendor Financing",
    programCustId: "VF-RIL-021",
    status: "Inactive",
    smartfinStatus: "Active",
    lastUpdated: "2023-11-05",
    sanctionedLimit: 2000000,
    utilisedLimit: 1800000,
    utilisationPercentage: 90,
  },
  {
    id: "DLR006",
    dealerCustId: "BPLHUL0101",
    name: "Best Price Logistics",
    anchor: "Hindustan Unilever",
    programName: "HUL Distributor Finance",
    programCustId: "DF-HUL-067",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-11-03",
    sanctionedLimit: 3500000,
    utilisedLimit: 2100000,
    utilisationPercentage: 60,
  },
  {
    id: "DLR007",
    dealerCustId: "MYNDTCS0112",
    name: "Myntra Designs",
    anchor: "Tata Consultancy Services",
    programName: "TCS Partner Program",
    programCustId: "PP-TCS-105",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-11-01",
    sanctionedLimit: 4000000,
    utilisedLimit: 3600000,
    utilisationPercentage: 90,
  },
  {
    id: "DLR008",
    dealerCustId: "GRSKMB0135",
    name: "Grofers India",
    anchor: "Kotak Mahindra Bank",
    programName: "Kotak Channel Finance",
    programCustId: "CF-KMB-034",
    status: "Inactive",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-10-28",
    sanctionedLimit: 2500000,
    utilisedLimit: 1875000,
    utilisationPercentage: 75,
  },
  {
    id: "DLR009",
    dealerCustId: "BKSAIR0149",
    name: "Booksellers Network",
    anchor: "Bharti Airtel",
    programName: "Airtel Dealer Finance",
    programCustId: "DF-AIR-089",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-10-25",
    sanctionedLimit: 1200000,
    utilisedLimit: 840000,
    utilisationPercentage: 70,
  },
  {
    id: "DLR010",
    dealerCustId: "APPINF0153",
    name: "Appario Retail",
    anchor: "Infosys Limited",
    programName: "Infosys Dealer Finance",
    programCustId: "DF-INF-078",
    status: "Active",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-10-22",
    sanctionedLimit: 3000000,
    utilisedLimit: 2400000,
    utilisationPercentage: 80,
  },
  {
    id: "DLR011",
    dealerCustId: "URBHDFC0169",
    name: "Urban Company",
    anchor: "HDFC Bank",
    programName: "HDFC Supply Chain Finance",
    programCustId: "SCF-HD-001",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-10-20",
    sanctionedLimit: 2800000,
    utilisedLimit: 1680000,
    utilisationPercentage: 60,
  },
  {
    id: "DLR012",
    dealerCustId: "BIGBIC0174",
    name: "BigBasket",
    anchor: "ICICI Bank",
    programName: "ICICI Distributor Finance",
    programCustId: "DF-IC-052",
    status: "Inactive",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-10-18",
    sanctionedLimit: 5500000,
    utilisedLimit: 4950000,
    utilisationPercentage: 90,
  },
  {
    id: "DLR013",
    dealerCustId: "DMTAXS0188",
    name: "DMart",
    anchor: "Axis Bank",
    programName: "Axis Channel Finance",
    programCustId: "CF-AXB-045",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-10-15",
    sanctionedLimit: 6000000,
    utilisedLimit: 4200000,
    utilisationPercentage: 70,
  },
  {
    id: "DLR014",
    dealerCustId: "SWGSBI0196",
    name: "Swiggy",
    anchor: "State Bank of India",
    programName: "SBI Supply Chain Finance",
    programCustId: "SCF-SBI-012",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-10-12",
    sanctionedLimit: 4500000,
    utilisedLimit: 3150000,
    utilisationPercentage: 70,
  },
  {
    id: "DLR015",
    dealerCustId: "ZOMRIL0205",
    name: "Zomato",
    anchor: "Reliance Industries",
    programName: "RIL Vendor Financing",
    programCustId: "VF-RIL-021",
    status: "Inactive",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-10-10",
    sanctionedLimit: 3800000,
    utilisedLimit: 3420000,
    utilisationPercentage: 90,
  },
  {
    id: "DLR016",
    dealerCustId: "NYKAHUL0217",
    name: "Nykaa",
    anchor: "Hindustan Unilever",
    programName: "HUL Distributor Finance",
    programCustId: "DF-HUL-067",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-10-08",
    sanctionedLimit: 2200000,
    utilisedLimit: 1320000,
    utilisationPercentage: 60,
  },
  {
    id: "DLR017",
    dealerCustId: "LNSTCS0229",
    name: "Lenskart",
    anchor: "Tata Consultancy Services",
    programName: "TCS Partner Program",
    programCustId: "PP-TCS-105",
    status: "Active",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-10-05",
    sanctionedLimit: 1800000,
    utilisedLimit: 1440000,
    utilisationPercentage: 80,
  },
  {
    id: "DLR018",
    dealerCustId: "PHRKMB0234",
    name: "PharmEasy",
    anchor: "Kotak Mahindra Bank",
    programName: "Kotak Channel Finance",
    programCustId: "CF-KMB-034",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-10-02",
    sanctionedLimit: 2500000,
    utilisedLimit: 1750000,
    utilisationPercentage: 70,
  },
  {
    id: "DLR019",
    dealerCustId: "CRDAIR0246",
    name: "CarDekho",
    anchor: "Bharti Airtel",
    programName: "Airtel Dealer Finance",
    programCustId: "DF-AIR-089",
    status: "Inactive",
    smartfinStatus: "Inactive",
    lastUpdated: "2023-09-28",
    sanctionedLimit: 1600000,
    utilisedLimit: 1280000,
    utilisationPercentage: 80,
  },
  {
    id: "DLR020",
    dealerCustId: "MMINF0251",
    name: "MakeMyTrip",
    anchor: "Infosys Limited",
    programName: "Infosys Dealer Finance",
    programCustId: "DF-INF-078",
    status: "Active",
    smartfinStatus: "Active",
    lastUpdated: "2023-09-25",
    sanctionedLimit: 3200000,
    utilisedLimit: 2240000,
    utilisationPercentage: 70,
  }
]
</file>

<file path="app/(dashboard)/stop-supply/page.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, AlertTriangle, CheckCircle2, ChevronRight, Filter } from "lucide-react"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { StopSupplyDetail } from "@/components/stop-supply-detail"
import { Badge } from "@/components/ui/badge"
import { DatePickerWithRange } from "@/components/date-range-picker"
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "@/components/ui/pagination"

export default function StopSupplyPage() {
  const [selectedDealer, setSelectedDealer] = useState<StopSupplyDealer | null>(null)
  const [showFilters, setShowFilters] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const [searchQuery, setSearchQuery] = useState("")
  
  const itemsPerPage = 10
  
  // Filter and paginate dealers
  const filteredDealers = stopSupplyDealers.filter(dealer => 
    dealer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    dealer.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
    dealer.programName.toLowerCase().includes(searchQuery.toLowerCase()) ||
    dealer.programCustId.toLowerCase().includes(searchQuery.toLowerCase())
  )
  
  const totalPages = Math.ceil(filteredDealers.length / itemsPerPage)
  const paginatedDealers = filteredDealers.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  )

  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Stop Supply View</h1>
        <p className="text-muted-foreground">Monitor and manage dealers with stop supply status</p>
      </div>

      <Card>
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row sm:items-center gap-4">
            <div className="flex items-center gap-2 w-full max-w-sm">
              <Search className="h-4 w-4 text-muted-foreground" />
              <Input 
                placeholder="Search dealers..." 
                className="h-9"
                value={searchQuery}
                onChange={(e) => {
                  setSearchQuery(e.target.value)
                  setCurrentPage(1) // Reset to first page on search
                }}
              />
            </div>
            <div className="flex items-center gap-2">
              <Select defaultValue="all">
                <SelectTrigger className="w-[180px] h-9">
                  <SelectValue placeholder="Filter by reason" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Reasons</SelectItem>
                  <SelectItem value="payment">Payment Default</SelectItem>
                  <SelectItem value="limit">Credit Limit Breach</SelectItem>
                  <SelectItem value="compliance">Compliance Issue</SelectItem>
                  <SelectItem value="fraud">Suspected Fraud</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-center gap-2 ml-auto">
              <Button variant="outline" size="sm" className="gap-2" onClick={() => setShowFilters(!showFilters)}>
                <Filter className="h-4 w-4" />
                Filters
              </Button>
            </div>
          </div>

          {showFilters && (
            <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Date Range</label>
                <DatePickerWithRange />
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium">Anchor</label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="All Anchors" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Anchors</SelectItem>
                    <SelectItem value="standard-bank">Standard Bank</SelectItem>
                    <SelectItem value="sasol">Sasol Limited</SelectItem>
                    <SelectItem value="mtn">MTN Group</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="space-y-2">
                <label className="text-sm font-medium">Overdue Days</label>
                <Select>
                  <SelectTrigger>
                    <SelectValue placeholder="All" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All</SelectItem>
                    <SelectItem value="30">30+ days</SelectItem>
                    <SelectItem value="60">60+ days</SelectItem>
                    <SelectItem value="90">90+ days</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
        </CardHeader>
        <CardContent className="p-0 overflow-auto">
          <div className="w-full min-w-[640px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Dealer Cust ID</TableHead>
                  <TableHead>Dealer Name</TableHead>
                  <TableHead>Anchor Name</TableHead>
                  <TableHead>Program Name</TableHead>
                  <TableHead>Program Cust ID</TableHead>
                  <TableHead>Overdue Days</TableHead>
                  <TableHead>Overdue Amount</TableHead>
                  <TableHead>Stop Supply Days</TableHead>
                  <TableHead>Last Triggered</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {paginatedDealers.map((dealer) => (
                  <TableRow
                    key={dealer.id}
                    className="cursor-pointer hover:bg-muted/50"
                    onClick={() => setSelectedDealer(dealer)}
                  >
                    <TableCell className="font-medium">{dealer.id}</TableCell>
                    <TableCell>{dealer.name}</TableCell>
                    <TableCell>{dealer.anchor}</TableCell>
                    <TableCell>{dealer.programName}</TableCell>
                    <TableCell>{dealer.programCustId}</TableCell>
                    <TableCell>
                      <Badge variant={dealer.overdueDays > 60 ? "destructive" : "outline"}>
                        {dealer.overdueDays} days
                      </Badge>
                    </TableCell>
                    <TableCell>₹ {dealer.overdueAmount.toLocaleString()}</TableCell>
                    <TableCell>{dealer.stopSupplyDays} days</TableCell>
                    <TableCell>{dealer.lastTriggeredDate}</TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={(e) => {
                            e.stopPropagation()
                            setSelectedDealer(dealer)
                          }}
                        >
                          <ChevronRight className="h-4 w-4" />
                          <span className="sr-only">View details</span>
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
          
          <div className="flex items-center justify-center py-4">
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault()
                      if (currentPage > 1) setCurrentPage(currentPage - 1)
                    }}
                    className={currentPage === 1 ? "pointer-events-none opacity-50" : ""}
                  />
                </PaginationItem>
                
                {Array.from({ length: totalPages }).map((_, i) => (
                  <PaginationItem key={i}>
                    <PaginationLink 
                      href="#" 
                      onClick={(e) => {
                        e.preventDefault()
                        setCurrentPage(i + 1)
                      }}
                      isActive={currentPage === i + 1}
                    >
                      {i + 1}
                    </PaginationLink>
                  </PaginationItem>
                ))}
                
                <PaginationItem>
                  <PaginationNext 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault()
                      if (currentPage < totalPages) setCurrentPage(currentPage + 1)
                    }}
                    className={currentPage === totalPages ? "pointer-events-none opacity-50" : ""}
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        </CardContent>
      </Card>

      <Dialog open={!!selectedDealer} onOpenChange={(open) => !open && setSelectedDealer(null)}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-auto">
          <DialogHeader>
            <DialogTitle>Stop Supply Details - {selectedDealer?.name}</DialogTitle>
            <DialogDescription>Detailed history of stop supply events for this dealer</DialogDescription>
          </DialogHeader>
          {selectedDealer && <StopSupplyDetail dealer={selectedDealer} />}
        </DialogContent>
      </Dialog>
    </div>
  )
}

export interface StopSupplyDealer {
  id: string
  name: string
  anchor: string
  programName: string
  programCustId: string
  overdueDays: number
  overdueAmount: number
  stopSupplyDays: number
  lastTriggeredDate: string
  history: StopSupplyHistoryItem[]
}

export interface StopSupplyHistoryItem {
  invoiceNumber: string
  overdueDays: number
  overdueAmount: number
  triggeredDate: string
  emailsSent: number
  anchorConfirmation: boolean
  attachments: Attachment[]
}

export interface Attachment {
  name: string
  type: string
  size: string
  url: string
}

const stopSupplyDealers: StopSupplyDealer[] = [
  {
    id: "DLR001",
    name: "Sharma Electronics",
    anchor: "HDFC Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-001",
    overdueDays: 45,
    overdueAmount: 125000,
    stopSupplyDays: 15,
    lastTriggeredDate: "2023-11-15",
    history: [
      {
        invoiceNumber: "INV-2023-1045",
        overdueDays: 45,
        overdueAmount: 125000,
        triggeredDate: "2023-11-15",
        emailsSent: 3,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1045.pdf",
            type: "PDF",
            size: "256 KB",
            url: "#",
          },
          {
            name: "Payment-Reminder-3.pdf",
            type: "PDF",
            size: "128 KB",
            url: "#",
          },
        ],
      },
      {
        invoiceNumber: "INV-2023-0987",
        overdueDays: 60,
        overdueAmount: 75000,
        triggeredDate: "2023-10-01",
        emailsSent: 4,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-0987.pdf",
            type: "PDF",
            size: "245 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR002",
    name: "Patel Distributors",
    anchor: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-045",
    overdueDays: 30,
    overdueAmount: 85000,
    stopSupplyDays: 10,
    lastTriggeredDate: "2023-11-10",
    history: [
      {
        invoiceNumber: "INV-2023-2156",
        overdueDays: 30,
        overdueAmount: 85000,
        triggeredDate: "2023-11-10",
        emailsSent: 2,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-2156.pdf",
            type: "PDF",
            size: "312 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR003",
    name: "Singh Auto Parts",
    anchor: "Reliance Industries",
    programName: "Vendor Financing",
    programCustId: "VF2023-089",
    overdueDays: 90,
    overdueAmount: 45000,
    stopSupplyDays: 30,
    lastTriggeredDate: "2023-11-05",
    history: [
      {
        invoiceNumber: "INV-2023-3267",
        overdueDays: 90,
        overdueAmount: 45000,
        triggeredDate: "2023-11-05",
        emailsSent: 5,
        anchorConfirmation: false,
        attachments: [
          {
            name: "Invoice-2023-3267.pdf",
            type: "PDF",
            size: "198 KB",
            url: "#",
          },
          {
            name: "Compliance-Notice.pdf",
            type: "PDF",
            size: "156 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR004",
    name: "Agarwal Traders",
    anchor: "ICICI Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-078",
    overdueDays: 65,
    overdueAmount: 92000,
    stopSupplyDays: 25,
    lastTriggeredDate: "2023-11-08",
    history: [
      {
        invoiceNumber: "INV-2023-4125",
        overdueDays: 65,
        overdueAmount: 92000,
        triggeredDate: "2023-11-08",
        emailsSent: 4,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-4125.pdf",
            type: "PDF",
            size: "287 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR005",
    name: "Mehta Enterprises",
    anchor: "Mahindra & Mahindra",
    programName: "Dealer Financing",
    programCustId: "DF2023-112",
    overdueDays: 15,
    overdueAmount: 150000,
    stopSupplyDays: 5,
    lastTriggeredDate: "2023-11-20",
    history: [
      {
        invoiceNumber: "INV-2023-5432",
        overdueDays: 15,
        overdueAmount: 150000,
        triggeredDate: "2023-11-20",
        emailsSent: 1,
        anchorConfirmation: false,
        attachments: [
          {
            name: "Invoice-2023-5432.pdf",
            type: "PDF",
            size: "325 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR006",
    name: "Gupta Hardware",
    anchor: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-156",
    overdueDays: 40,
    overdueAmount: 110000,
    stopSupplyDays: 12,
    lastTriggeredDate: "2023-11-12",
    history: [
      {
        invoiceNumber: "INV-2023-6789",
        overdueDays: 40,
        overdueAmount: 110000,
        triggeredDate: "2023-11-12",
        emailsSent: 3,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-6789.pdf",
            type: "PDF",
            size: "275 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR007",
    name: "Joshi Electronics",
    anchor: "Airtel",
    programName: "Distributor Financing",
    programCustId: "DF2023-201",
    overdueDays: 55,
    overdueAmount: 78000,
    stopSupplyDays: 18,
    lastTriggeredDate: "2023-11-07",
    history: [
      {
        invoiceNumber: "INV-2023-7123",
        overdueDays: 55,
        overdueAmount: 78000,
        triggeredDate: "2023-11-07",
        emailsSent: 4,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-7123.pdf",
            type: "PDF",
            size: "302 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR008",
    name: "Kumar Supplies",
    anchor: "Axis Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-145",
    overdueDays: 25,
    overdueAmount: 65000,
    stopSupplyDays: 8,
    lastTriggeredDate: "2023-11-17",
    history: [
      {
        invoiceNumber: "INV-2023-8456",
        overdueDays: 25,
        overdueAmount: 65000,
        triggeredDate: "2023-11-17",
        emailsSent: 2,
        anchorConfirmation: false,
        attachments: [
          {
            name: "Invoice-2023-8456.pdf",
            type: "PDF",
            size: "265 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR009",
    name: "Reddy Motors",
    anchor: "Bajaj Auto",
    programName: "Dealer Financing",
    programCustId: "DF2023-178",
    overdueDays: 70,
    overdueAmount: 135000,
    stopSupplyDays: 22,
    lastTriggeredDate: "2023-11-03",
    history: [
      {
        invoiceNumber: "INV-2023-9234",
        overdueDays: 70,
        overdueAmount: 135000,
        triggeredDate: "2023-11-03",
        emailsSent: 5,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-9234.pdf",
            type: "PDF",
            size: "315 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR010",
    name: "Choudhary Traders",
    anchor: "Reliance Industries",
    programName: "Vendor Financing",
    programCustId: "VF2023-223",
    overdueDays: 35,
    overdueAmount: 95000,
    stopSupplyDays: 10,
    lastTriggeredDate: "2023-11-14",
    history: [
      {
        invoiceNumber: "INV-2023-1098",
        overdueDays: 35,
        overdueAmount: 95000,
        triggeredDate: "2023-11-14",
        emailsSent: 3,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1098.pdf",
            type: "PDF",
            size: "295 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR011",
    name: "Iyer Electronics",
    anchor: "HDFC Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-189",
    overdueDays: 60,
    overdueAmount: 102000,
    stopSupplyDays: 20,
    lastTriggeredDate: "2023-11-05",
    history: [
      {
        invoiceNumber: "INV-2023-1176",
        overdueDays: 60,
        overdueAmount: 102000,
        triggeredDate: "2023-11-05",
        emailsSent: 4,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1176.pdf",
            type: "PDF",
            size: "280 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR012",
    name: "Sharma Distributors",
    anchor: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-234",
    overdueDays: 50,
    overdueAmount: 115000,
    stopSupplyDays: 15,
    lastTriggeredDate: "2023-11-10",
    history: [
      {
        invoiceNumber: "INV-2023-1267",
        overdueDays: 50,
        overdueAmount: 115000,
        triggeredDate: "2023-11-10",
        emailsSent: 3,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1267.pdf",
            type: "PDF",
            size: "310 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR013",
    name: "Patel Auto Parts",
    anchor: "Maruti Suzuki",
    programName: "Vendor Financing",
    programCustId: "VF2023-267",
    overdueDays: 85,
    overdueAmount: 155000,
    stopSupplyDays: 28,
    lastTriggeredDate: "2023-10-30",
    history: [
      {
        invoiceNumber: "INV-2023-1345",
        overdueDays: 85,
        overdueAmount: 155000,
        triggeredDate: "2023-10-30",
        emailsSent: 6,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1345.pdf",
            type: "PDF",
            size: "328 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR014",
    name: "Verma Enterprises",
    anchor: "ICICI Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-289",
    overdueDays: 20,
    overdueAmount: 75000,
    stopSupplyDays: 7,
    lastTriggeredDate: "2023-11-18",
    history: [
      {
        invoiceNumber: "INV-2023-1432",
        overdueDays: 20,
        overdueAmount: 75000,
        triggeredDate: "2023-11-18",
        emailsSent: 2,
        anchorConfirmation: false,
        attachments: [
          {
            name: "Invoice-2023-1432.pdf",
            type: "PDF",
            size: "290 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR015",
    name: "Mishra Traders",
    anchor: "Mahindra & Mahindra",
    programName: "Dealer Financing",
    programCustId: "DF2023-312",
    overdueDays: 75,
    overdueAmount: 130000,
    stopSupplyDays: 25,
    lastTriggeredDate: "2023-11-01",
    history: [
      {
        invoiceNumber: "INV-2023-1521",
        overdueDays: 75,
        overdueAmount: 130000,
        triggeredDate: "2023-11-01",
        emailsSent: 5,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1521.pdf",
            type: "PDF",
            size: "305 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR016",
    name: "Bansal Electronics",
    anchor: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-334",
    overdueDays: 30,
    overdueAmount: 82000,
    stopSupplyDays: 10,
    lastTriggeredDate: "2023-11-15",
    history: [
      {
        invoiceNumber: "INV-2023-1634",
        overdueDays: 30,
        overdueAmount: 82000,
        triggeredDate: "2023-11-15",
        emailsSent: 2,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1634.pdf",
            type: "PDF",
            size: "270 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR017",
    name: "Kapoor Supplies",
    anchor: "Airtel",
    programName: "Distributor Financing",
    programCustId: "DF2023-356",
    overdueDays: 55,
    overdueAmount: 97000,
    stopSupplyDays: 18,
    lastTriggeredDate: "2023-11-07",
    history: [
      {
        invoiceNumber: "INV-2023-1743",
        overdueDays: 55,
        overdueAmount: 97000,
        triggeredDate: "2023-11-07",
        emailsSent: 4,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1743.pdf",
            type: "PDF",
            size: "285 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR018",
    name: "Malhotra Traders",
    anchor: "Axis Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-378",
    overdueDays: 40,
    overdueAmount: 88000,
    stopSupplyDays: 12,
    lastTriggeredDate: "2023-11-12",
    history: [
      {
        invoiceNumber: "INV-2023-1856",
        overdueDays: 40,
        overdueAmount: 88000,
        triggeredDate: "2023-11-12",
        emailsSent: 3,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1856.pdf",
            type: "PDF",
            size: "275 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR019",
    name: "Khanna Motors",
    anchor: "Bajaj Auto",
    programName: "Dealer Financing",
    programCustId: "DF2023-390",
    overdueDays: 65,
    overdueAmount: 125000,
    stopSupplyDays: 22,
    lastTriggeredDate: "2023-11-03",
    history: [
      {
        invoiceNumber: "INV-2023-1923",
        overdueDays: 65,
        overdueAmount: 125000,
        triggeredDate: "2023-11-03",
        emailsSent: 4,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-1923.pdf",
            type: "PDF",
            size: "300 KB",
            url: "#",
          },
        ],
      },
    ],
  },
  {
    id: "DLR020",
    name: "Agarwal Enterprises",
    anchor: "Reliance Industries",
    programName: "Vendor Financing",
    programCustId: "VF2023-412",
    overdueDays: 35,
    overdueAmount: 105000,
    stopSupplyDays: 10,
    lastTriggeredDate: "2023-11-14",
    history: [
      {
        invoiceNumber: "INV-2023-2034",
        overdueDays: 35,
        overdueAmount: 105000,
        triggeredDate: "2023-11-14",
        emailsSent: 3,
        anchorConfirmation: true,
        attachments: [
          {
            name: "Invoice-2023-2034.pdf",
            type: "PDF",
            size: "290 KB",
            url: "#",
          },
        ],
      },
    ],
  }
]
</file>

<file path="components/edit-dealer-dialog.tsx">
"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Edit } from "lucide-react"

export type Dealer = {
  id: string
  name: string
  anchor: string
  dealerCustId: string
  programName: string
  programCustId: string
  sanctionedLimit: number
  utilisedLimit: number
  utilisationPercentage: number
  status: string
  smartfinStatus: "Active" | "Inactive"
  lastUpdated: string
}

export function EditDealerDialog({ dealer }: { dealer: Dealer }) {
  const [open, setOpen] = useState(false)
  const [formData, setFormData] = useState<Dealer & { 
    statusReason?: string
    comments?: string 
  }>({ 
    ...dealer,
    statusReason: "",
    comments: ""
  })
  const [previousStatus, setPreviousStatus] = useState(dealer.status)

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { id, value } = e.target
    setFormData((prev) => ({ ...prev, [id]: value }))
  }

  const handleSelectChange = (field: string, value: string) => {
    if (field === "status") {
      setFormData((prev) => ({ 
        ...prev, 
        [field]: value,
        statusReason: "",
        comments: ""
      }))
      setPreviousStatus(value)
    } else {
      setFormData((prev) => ({ ...prev, [field]: value }))
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if ((formData.status === "Inactive" && previousStatus === "Active") || 
        (formData.status === "Active" && previousStatus === "Inactive")) {
      if (!formData.statusReason) {
        alert("Please select a reason for changing the dealer status")
        return
      }
      if (!formData.comments) {
        alert("Please provide comments for changing the dealer status")
        return
      }
    }
    // In a real app, you would submit the form data to your API
    console.log("Updated dealer data:", formData)
    setOpen(false)
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Edit className="h-4 w-4" />
          <span className="sr-only">Edit {dealer.name}</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>Edit Dealer: {dealer.name}</DialogTitle>
          <DialogDescription>
            Make changes to the dealer details. Click save when you're done.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="id">Dealer ID</Label>
              <Input id="id" value={formData.id} disabled className="bg-muted" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="name">Dealer Name</Label>
              <Input id="name" value={formData.name} disabled className="bg-muted" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="anchor">Anchor</Label>
              <Input id="anchor" value={formData.anchor} disabled className="bg-muted" />
            </div>

            <div className="space-y-2">
              <Label htmlFor="sanctionedLimit">Sanctioned Limit (₹)</Label>
              <Input 
                id="sanctionedLimit" 
                type="number" 
                value={formData.sanctionedLimit} 
                disabled
                className="bg-muted"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="utilisedLimit">Utilised Limit (₹)</Label>
              <Input 
                id="utilisedLimit" 
                type="number" 
                value={formData.utilisedLimit} 
                disabled
                className="bg-muted"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="utilisationPercentage">Utilisation Percentage</Label>
              <Input 
                id="utilisationPercentage" 
                type="number" 
                value={formData.utilisationPercentage} 
                disabled
                className="bg-muted"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="status">Status</Label>
              <Select 
                value={formData.status} 
                onValueChange={(value) => handleSelectChange("status", value)}
              >
                <SelectTrigger id="status">
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="Active">Active</SelectItem>
                  <SelectItem value="Inactive">Inactive</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {((formData.status === "Inactive" && previousStatus === "Active") || 
              (formData.status === "Active" && previousStatus === "Inactive")) && (
              <>
                <div className="space-y-2">
                  <Label htmlFor="statusReason">Reason for {formData.status === "Active" ? "Activation" : "Inactivation"}</Label>
                  <Select
                    value={formData.statusReason}
                    onValueChange={(value) => handleSelectChange("statusReason", value)}
                  >
                    <SelectTrigger id="statusReason">
                      <SelectValue placeholder={`Select reason for ${formData.status === "Active" ? "activation" : "inactivation"}`} />
                    </SelectTrigger>
                    <SelectContent>
                      {formData.status === "Active" ? (
                        <>
                          <SelectItem value="issue-resolved">Issue Resolved</SelectItem>
                          <SelectItem value="payment-received">Payment Received</SelectItem>
                          <SelectItem value="documentation-complete">Documentation Complete</SelectItem>
                          <SelectItem value="management-approval">Management Approval</SelectItem>
                        </>
                      ) : (
                        <>
                          <SelectItem value="rm-feedback">RM Feedback</SelectItem>
                          <SelectItem value="overdue-in-other-program">Overdue in Other Program</SelectItem>
                          <SelectItem value="others">Others</SelectItem>
                        </>
                      )}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="comments">Comments</Label>
                  <textarea
                    id="comments"
                    className="flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    placeholder="Please provide additional comments"
                    value={formData.comments}
                    onChange={handleChange}
                    required
                  />
                </div>
              </>
            )}
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button type="submit">Save Changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path="app/(dashboard)/anchor-master/page.tsx">
"use client"

import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, Edit } from "lucide-react"
import Link from "next/link"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "@/components/ui/pagination"

export type Anchor = {
  id: string
  name: string
  industry: string
  psmName: string // renamed from contactPerson
  status: string
  programName: string
  programCustId: string
  anchorCustId: string
  region: string
  phone?: string
  address?: string
  anchorEmails?: string[]
  stopSupplyRule?: string
  fldgInvocationRule?: string
}

export default function AnchorMasterPage() {
  // State variables
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [searchField, setSearchField] = useState<"programName" | "programCustId">("programName");
  const [selectedPsm, setSelectedPsm] = useState("all");

  // Get unique PSM names for filter dropdown
  const uniquePsmNames = useMemo(() => {
    return Array.from(new Set(anchors.map(anchor => anchor.psmName)));
  }, []);

  // Filter anchors based on search term, search field, and selected PSM
  const filteredAnchors = useMemo(() => {
    let filtered = anchors;
    
    // Filter by PSM
    if (selectedPsm !== "all") {
      filtered = filtered.filter(anchor => anchor.psmName === selectedPsm);
    }
    
    // Filter by search term
    if (searchTerm) {
      filtered = filtered.filter(anchor => 
        anchor[searchField].toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    return filtered;
  }, [anchors, searchTerm, searchField, selectedPsm]);

  // Paginate filtered anchors
  const itemsPerPage = 10;
  const paginatedAnchors = useMemo(() => {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    return filteredAnchors.slice(startIndex, endIndex);
  }, [filteredAnchors, currentPage]);

  // Calculate total pages
  const totalPages = Math.ceil(filteredAnchors.length / itemsPerPage);

  return (
    <div className="flex flex-col gap-4">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Anchor Master</h1>
          <p className="text-muted-foreground">Manage anchor entities and their details</p>
        </div>
      </div>

      <Card>
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row sm:items-center gap-4">
            <div className="flex items-center gap-2 w-full max-w-sm">
              <Search className="h-4 w-4 text-muted-foreground" />
              <div className="flex gap-2 w-full">
                <Select 
                  value={searchField}
                  onValueChange={(value: "programName" | "programCustId") => setSearchField(value)}
                >
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Search by..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="programName">Program Name</SelectItem>
                    <SelectItem value="programCustId">Program Cust ID</SelectItem>
                  </SelectContent>
                </Select>
                <Input 
                  placeholder={`Search by ${searchField}...`} 
                  className="h-9"
                  value={searchTerm}
                  onChange={(e) => {
                    setSearchTerm(e.target.value);
                    setCurrentPage(1); // Reset to first page when searching
                  }}
                />
              </div>
            </div>
            <div className="flex items-center gap-2 ml-auto">
              <Select
                value={selectedPsm}
                onValueChange={(value) => {
                  setSelectedPsm(value);
                  setCurrentPage(1); // Reset to first page when filtering
                }}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Filter by PSM" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All PSMs</SelectItem>
                  {uniquePsmNames.map((psm) => (
                    <SelectItem key={psm} value={psm}>
                      {psm}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0 overflow-auto">
          <div className="w-full min-w-[640px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Anchor ID</TableHead>
                  <TableHead>Name</TableHead>
                  <TableHead>Industry</TableHead>
                  <TableHead>Program Name</TableHead>
                  <TableHead>Program Cust ID</TableHead>
                  <TableHead>Anchor Cust ID</TableHead>
                  <TableHead>PSM Name</TableHead>
                  <TableHead>Region</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {paginatedAnchors.map((anchor) => (
                  <TableRow key={anchor.id}>
                    <TableCell className="font-medium">{anchor.id}</TableCell>
                    <TableCell>{anchor.name}</TableCell>
                    <TableCell>{anchor.industry}</TableCell>
                    <TableCell>{anchor.programName}</TableCell>
                    <TableCell>{anchor.programCustId}</TableCell>
                    <TableCell>{anchor.anchorCustId}</TableCell>
                    <TableCell>{anchor.psmName}</TableCell>
                    <TableCell>{anchor.region}</TableCell>
                    <TableCell>
                      <div
                        className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold ${
                          anchor.status === "Active"
                            ? "bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-300"
                            : "bg-yellow-50 text-yellow-700 dark:bg-yellow-900/20 dark:text-yellow-300"
                        }`}
                      >
                        {anchor.status}
                      </div>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end gap-2">
                        <Link href={`/anchor-master/${anchor.id}`}>
                        <Button variant="ghost" size="icon">
                          <Edit className="h-4 w-4" />
                            <span className="sr-only">Edit {anchor.name}</span>
                        </Button>
                        </Link>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {totalPages > 1 && (
            <div className="flex items-center justify-center space-x-2 py-4">
              <Pagination>
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious 
                      onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                      className={currentPage === 1 ? "pointer-events-none opacity-50" : "cursor-pointer"}
                    />
                  </PaginationItem>
                  
                  {Array.from({ length: totalPages }, (_, i) => (
                    <PaginationItem key={i}>
                      <PaginationLink 
                        onClick={() => setCurrentPage(i + 1)}
                        isActive={currentPage === i + 1}
                      >
                        {i + 1}
                      </PaginationLink>
                    </PaginationItem>
                  ))}
                  
                  <PaginationItem>
                    <PaginationNext 
                      onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                      className={currentPage === totalPages ? "pointer-events-none opacity-50" : "cursor-pointer"}
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

export const anchors: Anchor[] = [
  {
    id: "ANC001",
    name: "HDFC Bank",
    industry: "Banking",
    psmName: "Rajesh Kumar",
    programName: "HDFC Supply Chain Finance",
    programCustId: "SCF-HD-001",
    anchorCustId: "HDFC0001234",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 6731 6000",
    address: "HDFC Bank House, Senapati Bapat Marg, Lower Parel, Mumbai 400013",
    anchorEmails: [
      "finance@hdfcbank.com",
      "support@hdfcbank.com",
      "info@hdfcbank.com"
    ]
  },
  {
    id: "ANC002",
    name: "Reliance Industries",
    industry: "Energy",
    psmName: "Anand Sharma",
    programName: "RIL Vendor Financing",
    programCustId: "VF-RIL-021",
    anchorCustId: "RIL9876543",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 3555 5000",
    address: "Maker Chambers IV, 222 Nariman Point, Mumbai 400021",
    anchorEmails: [
      "vendor.finance@ril.com", 
      "treasury@ril.com"
    ]
  },
  {
    id: "ANC003",
    name: "Tata Consultancy Services",
    industry: "IT Services",
    psmName: "Priya Mehta",
    programName: "TCS Partner Program",
    programCustId: "PP-TCS-105",
    anchorCustId: "TCS5643210",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 6778 9999",
    address: "TCS House, Raveline Street, Fort, Mumbai 400001",
    anchorEmails: [
      "partner.finance@tcs.com", 
      "corporate@tcs.com"
    ]
  },
  {
    id: "ANC004",
    name: "ICICI Bank",
    industry: "Banking",
    psmName: "Vikram Singh",
    programName: "ICICI Distribution Finance",
    programCustId: "DF-IC-052",
    anchorCustId: "ICICI7890123",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 2653 1414",
    address: "ICICI Bank Towers, Bandra-Kurla Complex, Mumbai 400051",
    anchorEmails: [
      "finance@icicibank.com",
      "support@icicibank.com"
    ]
  },
  {
    id: "ANC005",
    name: "Infosys Limited",
    industry: "IT Services",
    psmName: "Sunil Nair",
    programName: "Infosys Dealer Finance",
    programCustId: "DF-INF-078",
    anchorCustId: "INF4560987",
    region: "Bangalore",
    status: "Active",
    phone: "+91 80 2852 0261",
    address: "Electronics City, Hosur Road, Bangalore 560100",
    anchorEmails: [
      "dealer.finance@infosys.com",
      "partners@infosys.com"
    ]
  },
  {
    id: "ANC006",
    name: "Kotak Mahindra Bank",
    industry: "Banking",
    psmName: "Neha Gupta",
    programName: "Kotak Channel Finance",
    programCustId: "CF-KMB-034",
    anchorCustId: "KMB2345678",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 6166 0001",
    address: "27BKC, G Block, Bandra Kurla Complex, Mumbai 400051",
    anchorEmails: [
      "channel.finance@kotak.com",
      "treasury@kotak.com"
    ]
  },
  {
    id: "ANC007",
    name: "Hindustan Unilever",
    industry: "FMCG",
    psmName: "Ravi Desai",
    programName: "HUL Distributor Finance",
    programCustId: "DF-HUL-067",
    anchorCustId: "HUL3456789",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 3983 0000",
    address: "Unilever House, B.D. Sawant Marg, Chakala, Mumbai 400099",
    anchorEmails: [
      "distributor.finance@hul.com",
      "commercial@hul.com"
    ]
  },
  {
    id: "ANC008",
    name: "State Bank of India",
    industry: "Banking",
    psmName: "Ramesh Patel",
    programName: "SBI Supply Chain Finance",
    programCustId: "SCF-SBI-012",
    anchorCustId: "SBI9087654",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 2274 0000",
    address: "State Bank Bhavan, Madame Cama Road, Mumbai 400021",
    anchorEmails: [
      "scf@sbi.co.in",
      "corporate@sbi.co.in"
    ]
  },
  {
    id: "ANC009",
    name: "Bharti Airtel",
    industry: "Telecommunications",
    psmName: "Kiran Reddy",
    programName: "Airtel Dealer Finance",
    programCustId: "DF-AIR-089",
    anchorCustId: "AIR6789012",
    region: "Delhi",
    status: "Active",
    phone: "+91 11 4666 6100",
    address: "Bharti Crescent, 1 Nelson Mandela Road, Vasant Kunj, New Delhi 110070",
    anchorEmails: [
      "dealer.finance@airtel.com",
      "treasury@airtel.com"
    ]
  },
  {
    id: "ANC010",
    name: "Axis Bank",
    industry: "Banking",
    psmName: "Sanjay Kapoor",
    programName: "Axis Channel Finance",
    programCustId: "CF-AXB-045",
    anchorCustId: "AXB1092837",
    region: "Mumbai",
    status: "Inactive",
    phone: "+91 22 2425 2525",
    address: "Axis House, Wadia International Centre, Worli, Mumbai 400025",
    anchorEmails: [
      "channel.finance@axisbank.com",
      "corporate@axisbank.com"
    ]
  },
  {
    id: "ANC011",
    name: "ITC Limited",
    industry: "Conglomerate",
    psmName: "Arvind Joshi",
    programName: "ITC Distributor Program",
    programCustId: "DP-ITC-023",
    anchorCustId: "ITC5432109",
    region: "Kolkata",
    status: "Active",
    phone: "+91 33 2288 9371",
    address: "Virginia House, 37 J.L. Nehru Road, Kolkata 700071",
    anchorEmails: [
      "distributor.program@itc.in",
      "finance@itc.in"
    ]
  },
  {
    id: "ANC012",
    name: "Larsen & Toubro",
    industry: "Engineering",
    psmName: "Ajay Malhotra",
    programName: "L&T Vendor Finance",
    programCustId: "VF-LNT-056",
    anchorCustId: "LNT2109876",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 6752 5656",
    address: "L&T House, Ballard Estate, Mumbai 400001",
    anchorEmails: [
      "vendor.finance@larsentoubro.com",
      "treasury@larsentoubro.com"
    ]
  },
  {
    id: "ANC013",
    name: "Bajaj Finance",
    industry: "Financial Services",
    psmName: "Deepika Ahuja",
    programName: "Bajaj Retailer Finance",
    programCustId: "RF-BAF-091",
    anchorCustId: "BAF8765432",
    region: "Pune",
    status: "Active",
    phone: "+91 20 3054 0000",
    address: "Akurdi, Pune 411035",
    anchorEmails: [
      "retailer.finance@bajajfinserv.in",
      "support@bajajfinserv.in"
    ]
  },
  {
    id: "ANC014",
    name: "HCL Technologies",
    industry: "IT Services",
    psmName: "Vivek Bhatia",
    programName: "HCL Partner Financing",
    programCustId: "PF-HCL-037",
    anchorCustId: "HCL3217890",
    region: "Noida",
    status: "Active",
    phone: "+91 120 430 2000",
    address: "Plot No. 3A, Sector 126, Noida 201304",
    anchorEmails: [
      "partner.finance@hcl.com",
      "treasury@hcl.com"
    ]
  },
  {
    id: "ANC015",
    name: "Asian Paints",
    industry: "Manufacturing",
    psmName: "Rahul Jain",
    programName: "Asian Paints Dealer Program",
    programCustId: "DP-ASP-076",
    anchorCustId: "ASP4321098",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 6212 1000",
    address: "6A Shantinagar, Santacruz East, Mumbai 400055",
    anchorEmails: [
      "dealer.program@asianpaints.com",
      "finance@asianpaints.com"
    ]
  },
  {
    id: "ANC016",
    name: "Mahindra & Mahindra",
    industry: "Automotive",
    psmName: "Vikas Agarwal",
    programName: "Mahindra Supplier Finance",
    programCustId: "SF-MNM-019",
    anchorCustId: "MNM7654321",
    region: "Mumbai",
    status: "Active",
    phone: "+91 22 2490 1441",
    address: "Mahindra Towers, G.M. Bhosale Marg, Worli, Mumbai 400018",
    anchorEmails: [
      "supplier.finance@mahindra.com",
      "treasury@mahindra.com"
    ]
  },
  {
    id: "ANC017",
    name: "Titan Company",
    industry: "Consumer Goods",
    psmName: "Shreya Malik",
    programName: "Titan Retailer Finance",
    programCustId: "RF-TCL-082",
    anchorCustId: "TCL5678901",
    region: "Bangalore",
    status: "Active",
    phone: "+91 80 6704 7000",
    address: "Golden Enclave, Tower A, Airport Road, Bangalore 560017",
    anchorEmails: [
      "retailer.finance@titan.co.in",
      "accounts@titan.co.in"
    ]
  },
  {
    id: "ANC018",
    name: "Sun Pharmaceutical",
    industry: "Pharmaceuticals",
    psmName: "Gaurav Mishra",
    programName: "Sun Pharma Distributor Finance",
    programCustId: "DF-SUN-048",
    anchorCustId: "SUN8901234",
    region: "Mumbai",
    status: "Inactive",
    phone: "+91 22 4324 4324",
    address: "Sun House, CTS No. 201 B/1, Western Express Highway, Goregaon East, Mumbai 400063",
    anchorEmails: [
      "distributor.finance@sunpharma.com",
      "accounts@sunpharma.com"
    ]
  },
  {
    id: "ANC019",
    name: "NTPC Limited",
    industry: "Power Generation",
    psmName: "Manish Sinha",
    programName: "NTPC Vendor Program",
    programCustId: "VP-NTPC-063",
    anchorCustId: "NTPC7890123",
    region: "Delhi",
    status: "Active",
    phone: "+91 11 2436 7072",
    address: "NTPC Bhawan, SCOPE Complex, 7 Institutional Area, Lodhi Road, New Delhi 110003",
    anchorEmails: [
      "vendor.program@ntpc.co.in",
      "finance@ntpc.co.in"
    ]
  },
  {
    id: "ANC020",
    name: "Bajaj Auto",
    industry: "Automotive",
    psmName: "Amit Verma",
    programName: "Bajaj Dealer Finance",
    programCustId: "DF-BAL-029",
    anchorCustId: "BAL2345678",
    region: "Pune",
    status: "Active",
    phone: "+91 20 2714 6999",
    address: "Mumbai-Pune Road, Akurdi, Pune 411035",
    anchorEmails: [
      "dealer.finance@bajajauto.co.in",
      "accounts@bajajauto.co.in"
    ]
  }
]
</file>

<file path="components/sidebar.tsx">
"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { useSidebar } from "./sidebar-provider"
import { cn } from "@/lib/utils"
import {
  LayoutDashboard,
  Settings,
  HelpCircle,
  LogOut,
  Menu,
  Anchor,
  Store,
  AlertOctagon,
  Shield,
  FileText,
  Mail,
  Sliders,
  X,
  Palette,
  Clock,
  BarChart
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { ThemeToggle } from "@/components/theme-toggle"
import { logout } from "@/lib/auth"

// Define types for our items
type NavItem = {
  name: string;
  href: string;
  icon: React.ComponentType<{ className?: string }>;
  badge?: string;
}

type FooterItem = NavItem & {
  description?: string;
  subItems?: Array<{
    name: string;
    href: string;
    description?: string;
  }>;
  onClick?: () => void;
}

export function Sidebar() {
  const pathname = usePathname()
  const { isOpen, toggle } = useSidebar()

  return (
    <>
      <div
        className={cn("fixed inset-0 z-50 bg-background/80 backdrop-blur-sm", isOpen ? "block" : "hidden")}
        onClick={toggle}
      />
      <div
        className={cn(
          "fixed inset-y-0 left-0 z-50 w-72 bg-background",
          "transition-transform duration-300 ease-in-out",
          "border-r",
          isOpen ? "translate-x-0" : "-translate-x-full",
        )}
      >
        <div className="flex h-14 items-center border-b px-4">
          <span className="text-lg font-semibold">Early Warning Signal</span>
          <Button variant="ghost" size="icon" className="ml-auto" onClick={toggle}>
            <X className="h-5 w-5" />
          </Button>
        </div>
        <div className="flex flex-col h-[calc(100vh-3.5rem)]">
          <div className="flex-1 overflow-auto py-2 no-scrollbar">
            <nav className="grid gap-1 px-2">
              {navItems.map((item, index) => (
                <Link
                  key={index}
                  href={item.href}
                  className={cn(
                    "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground",
                    pathname === item.href ? "bg-accent text-accent-foreground" : "text-muted-foreground",
                  )}
                  onClick={toggle}
                >
                  <item.icon className="h-5 w-5" />
                  <span>{item.name}</span>
                  {item.badge && (
                    <span className="ml-auto flex h-5 w-5 items-center justify-center rounded-full bg-primary text-[0.625rem] font-medium text-primary-foreground">
                      {item.badge}
                    </span>
                  )}
                </Link>
              ))}
            </nav>

            <div className="mt-6 px-3">
              <h3 className="mb-2 px-2 text-xs font-semibold text-muted-foreground">MASTER DATA</h3>
              <nav className="grid gap-1">
                {masterItems.map((item, index) => (
                  <Link
                    key={index}
                    href={item.href}
                    className={cn(
                      "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground",
                      pathname === item.href ? "bg-accent text-accent-foreground" : "text-muted-foreground",
                    )}
                    onClick={toggle}
                  >
                    <item.icon className="h-5 w-5" />
                    <span>{item.name}</span>
                    {item.badge && (
                      <span className="ml-auto flex h-5 w-5 items-center justify-center rounded-full bg-primary text-[0.625rem] font-medium text-primary-foreground">
                        {item.badge}
                      </span>
                    )}
                  </Link>
                ))}
              </nav>
            </div>

            <div className="mt-6 px-3">
              <h3 className="mb-2 px-2 text-xs font-semibold text-muted-foreground">MONITORING</h3>
              <nav className="grid gap-1">
                {monitoringItems.map((item, index) => (
                  <Link
                    key={index}
                    href={item.href}
                    className={cn(
                      "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground",
                      pathname === item.href ? "bg-accent text-accent-foreground" : "text-muted-foreground",
                    )}
                    onClick={toggle}
                  >
                    <item.icon className="h-5 w-5" />
                    <span>{item.name}</span>
                    {item.badge && (
                      <span className="ml-auto flex h-5 w-5 items-center justify-center rounded-full bg-primary text-[0.625rem] font-medium text-primary-foreground">
                        {item.badge}
                      </span>
                    )}
                  </Link>
                ))}
              </nav>
            </div>

            <div className="mt-6 px-3">
              <h3 className="mb-2 px-2 text-xs font-semibold text-muted-foreground">ADMINISTRATION</h3>
              <nav className="grid gap-1">
                {adminItems.map((item, index) => (
                  <Link
                    key={index}
                    href={item.href}
                    className={cn(
                      "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground",
                      pathname === item.href ? "bg-accent text-accent-foreground" : "text-muted-foreground",
                    )}
                    onClick={toggle}
                  >
                    <item.icon className="h-5 w-5" />
                    <span>{item.name}</span>
                    {item.badge && (
                      <span className="ml-auto flex h-5 w-5 items-center justify-center rounded-full bg-primary text-[0.625rem] font-medium text-primary-foreground">
                        {item.badge}
                      </span>
                    )}
                  </Link>
                ))}
              </nav>
            </div>
          </div>
          <div className="border-t p-2">
            <nav className="grid gap-1">
              {footerItems.map((item, index) => (
                <div key={index}>
                  <Link
                    href={item.href}
                    className={cn(
                      "flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground",
                      pathname === item.href ? "bg-accent text-accent-foreground" : "text-muted-foreground",
                    )}
                    onClick={(e) => {
                      if (item.onClick) {
                        e.preventDefault();
                        item.onClick();
                      }
                      toggle();
                    }}
                  >
                    <item.icon className="h-5 w-5" />
                    <span>{item.name}</span>
                    {item.description && (
                      <span className="ml-auto text-xs text-muted-foreground">{item.description}</span>
                    )}
                  </Link>
                </div>
              ))}
              <div className="flex items-center gap-3 rounded-md px-3 py-2">
                <Palette className="h-5 w-5 text-muted-foreground" />
                <span className="text-sm font-medium text-muted-foreground">Theme</span>
                <div className="ml-auto">
                  <ThemeToggle />
                </div>
              </div>
            </nav>
          </div>
        </div>
      </div>
    </>
  )
}

const navItems: NavItem[] = [
  { name: "Dashboard", href: "/dashboard", icon: LayoutDashboard }
];

const masterItems: NavItem[] = [
  { name: "Anchor Master", href: "/anchor-master", icon: Anchor },
  { name: "Dealer Master", href: "/dealer-master", icon: Store },
];

const monitoringItems: NavItem[] = [
  { name: "Stop Supply", href: "/stop-supply", icon: AlertOctagon },
  { name: "FLDG View", href: "/fldg-view", icon: Shield },
  { name: "Credit Noting", href: "/dealer-status", icon: Store },
];

const adminItems: NavItem[] = [
  { name: "Reports", href: "/reports", icon: FileText },
  { name: "Configuration", href: "/configuration", icon: Sliders },
  { name: "Data Sync", href: "/data-sync", icon: Sliders },
];

const footerItems: FooterItem[] = [
  { 
    name: "Logout", 
    href: "#", 
    icon: LogOut, 
    description: "Exit the app",
    onClick: () => logout()
  },
];
</file>

<file path="app/(dashboard)/fldg-view/page.tsx">
"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, Shield, Download, Eye, FileText, AlertTriangle } from "lucide-react"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Switch } from "@/components/ui/switch"
import { useState } from "react"
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from "@/components/ui/pagination"

// Define the dealer data interface
interface DealerFLDGData {
  dealerId: string;
  dealerName: string;
  anchorName: string;
  programName: string;
  programCustId: string;
  overdueDays: number;
  overdueAmount: number;
  fldgInvocationDays: number;
  lastInvocation: string | null;
  isInvoked: boolean;
}

function FLDGHistoryDialog({ dealer }: { dealer: DealerFLDGData }) {
  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Eye className="h-4 w-4" />
          <span className="sr-only">View FLDG History</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>FLDG Invocation History - {dealer.dealerName}</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <div>
            <h3 className="font-semibold mb-2">Invocation History</h3>
            <ul className="list-disc pl-5 space-y-1">
              <li>2023-10-30: Invoked for ₹ 200,000</li>
              <li>2023-09-15: Invoked for ₹ 150,000</li>
              <li>2023-08-01: Invoked for ₹ 100,000</li>
            </ul>
          </div>
          <div>
            <h3 className="font-semibold mb-2">Emails Sent</h3>
            <ul className="list-disc pl-5 space-y-1">
              <li>2023-10-30: Email sent to dealer and anchor</li>
              <li>2023-09-15: Reminder email sent</li>
              <li>2023-08-01: Initial invocation email sent</li>
            </ul>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default function FLDGViewPage() {
  const [dealerStatuses, setDealerStatuses] = useState(
    dealerFldgData.reduce((acc, dealer) => ({
      ...acc,
      [dealer.dealerId]: dealer.isInvoked || false
    }), {} as Record<string, boolean>)
  )
  
  const [currentPage, setCurrentPage] = useState(1)
  const [searchQuery, setSearchQuery] = useState("")
  
  const itemsPerPage = 10
  
  // Filter dealers based on search query
  const filteredDealers = dealerFldgData.filter(dealer => 
    dealer.dealerName.toLowerCase().includes(searchQuery.toLowerCase()) ||
    dealer.dealerId.toLowerCase().includes(searchQuery.toLowerCase()) ||
    dealer.programName.toLowerCase().includes(searchQuery.toLowerCase()) ||
    dealer.programCustId.toLowerCase().includes(searchQuery.toLowerCase())
  )
  
  // Get paginated results
  const totalPages = Math.ceil(filteredDealers.length / itemsPerPage)
  const paginatedDealers = filteredDealers.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  )

  const handleInvocationToggle = (dealerId: string) => {
    setDealerStatuses(prev => ({
      ...prev,
      [dealerId]: !prev[dealerId]
    }))
  }

  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">FLDG View</h1>
        <p className="text-muted-foreground">Monitor First Loss Default Guarantee status across anchors</p>
      </div>

      <Tabs defaultValue="dealers">
        <TabsList className="mb-4">
          <TabsTrigger value="dealers">Dealer-wise View</TabsTrigger>
          <TabsTrigger value="anchors">Anchor-wise View</TabsTrigger>
        </TabsList>
        
        <TabsContent value="dealers">
        <Card>
            <CardHeader className="p-4">
              <div className="flex flex-col sm:flex-row sm:items-center gap-4">
                <div className="flex items-center gap-2 w-full max-w-sm">
                  <Search className="h-4 w-4 text-muted-foreground" />
                  <Input 
                    placeholder="Search dealers..." 
                    className="h-9" 
                    value={searchQuery}
                    onChange={(e) => {
                      setSearchQuery(e.target.value)
                      setCurrentPage(1) // Reset to first page on search
                    }}
                  />
                </div>
              </div>
          </CardHeader>
            <CardContent className="p-0 overflow-auto">
              <div className="w-full min-w-[1000px]">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Dealer Cust ID</TableHead>
                      <TableHead>Dealer Name</TableHead>
                      <TableHead>Anchor Name</TableHead>
                      <TableHead>Program Name</TableHead>
                      <TableHead>Program Cust ID</TableHead>
                      <TableHead>Overdue Days</TableHead>
                      <TableHead>Overdue Amount</TableHead>
                      <TableHead>FLDG Invocation Days</TableHead>
                      <TableHead>Last Invocation</TableHead>
                      <TableHead>FLDG Invoked</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {paginatedDealers.map((item) => (
                      <TableRow key={item.dealerId}>
                        <TableCell className="font-medium">{item.dealerId}</TableCell>
                        <TableCell>{item.dealerName}</TableCell>
                        <TableCell>{item.anchorName}</TableCell>
                        <TableCell>{item.programName}</TableCell>
                        <TableCell>{item.programCustId}</TableCell>
                        <TableCell>
                          <Badge 
                            variant={item.overdueDays > 60 ? "destructive" : item.overdueDays > 30 ? "secondary" : "outline"}
                          >
                            {item.overdueDays} days
                          </Badge>
                        </TableCell>
                        <TableCell>₹ {item.overdueAmount.toLocaleString()}</TableCell>
                        <TableCell>{item.fldgInvocationDays} days</TableCell>
                        <TableCell>{item.lastInvocation || "N/A"}</TableCell>
                        <TableCell>
                          <Switch
                            checked={dealerStatuses[item.dealerId]}
                            onCheckedChange={() => handleInvocationToggle(item.dealerId)}
                          />
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end gap-2">
                            <FLDGHistoryDialog dealer={item} />
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
              
              <div className="flex items-center justify-center py-4">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious 
                        href="#" 
                        onClick={(e) => {
                          e.preventDefault()
                          if (currentPage > 1) setCurrentPage(currentPage - 1)
                        }}
                        className={currentPage === 1 ? "pointer-events-none opacity-50" : ""}
                      />
                    </PaginationItem>
                    
                    {Array.from({ length: totalPages }).map((_, i) => (
                      <PaginationItem key={i}>
                        <PaginationLink 
                          href="#" 
                          onClick={(e) => {
                            e.preventDefault()
                            setCurrentPage(i + 1)
                          }}
                          isActive={currentPage === i + 1}
                        >
                          {i + 1}
                        </PaginationLink>
                      </PaginationItem>
                    ))}
                    
                    <PaginationItem>
                      <PaginationNext 
                        href="#" 
                        onClick={(e) => {
                          e.preventDefault()
                          if (currentPage < totalPages) setCurrentPage(currentPage + 1)
                        }}
                        className={currentPage === totalPages ? "pointer-events-none opacity-50" : ""}
                      />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
          </CardContent>
        </Card>
        </TabsContent>
        
        <TabsContent value="anchors">
      <Card>
        <CardHeader className="p-4">
          <div className="flex flex-col sm:flex-row sm:items-center gap-4">
            <div className="flex items-center gap-2 w-full max-w-sm">
              <Search className="h-4 w-4 text-muted-foreground" />
              <Input placeholder="Search anchors..." className="h-9" />
            </div>
            <div className="flex items-center gap-2 ml-auto">
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0 overflow-auto">
          <div className="w-full min-w-[640px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Anchor</TableHead>
                  <TableHead>FLDG Amount</TableHead>
                  <TableHead>Utilized</TableHead>
                  <TableHead>Available</TableHead>
                  <TableHead>Utilization %</TableHead>
                  <TableHead>Last Updated</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {fldgData.map((item) => (
                  <TableRow key={item.anchor}>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <Shield className="h-4 w-4 text-primary" />
                        {item.anchor}
                      </div>
                    </TableCell>
                        <TableCell>₹ {item.totalAmount.toLocaleString()}</TableCell>
                        <TableCell>₹ {item.utilized.toLocaleString()}</TableCell>
                        <TableCell>₹ {item.available.toLocaleString()}</TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Progress value={item.utilizationPercentage} className="h-2 w-20" />
                        <span>{item.utilizationPercentage}%</span>
                      </div>
                    </TableCell>
                    <TableCell>{item.lastUpdated}</TableCell>
                    <TableCell className="text-right">
                      <Button variant="ghost" size="sm" className="gap-2">
                        <Eye className="h-4 w-4" />
                        Details
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

const fldgData = [
  {
    anchor: "HDFC Bank",
    totalAmount: 10000000,
    utilized: 3500000,
    available: 6500000,
    utilizationPercentage: 35,
    lastUpdated: "2023-11-15",
  },
  {
    anchor: "Tata Motors",
    totalAmount: 5000000,
    utilized: 2250000,
    available: 2750000,
    utilizationPercentage: 45,
    lastUpdated: "2023-11-14",
  },
  {
    anchor: "Reliance Industries",
    totalAmount: 7500000,
    utilized: 2625000,
    available: 4875000,
    utilizationPercentage: 35,
    lastUpdated: "2023-11-13",
  },
  {
    anchor: "State Bank of India",
    totalAmount: 2500000,
    utilized: 375000,
    available: 2125000,
    utilizationPercentage: 15,
    lastUpdated: "2023-11-12",
  },
]

const dealerFldgData: DealerFLDGData[] = [
  {
    dealerId: "DLR001",
    dealerName: "Sharma Electronics",
    anchorName: "HDFC Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-001",
    overdueDays: 75,
    overdueAmount: 850000,
    fldgInvocationDays: 15,
    lastInvocation: "2023-10-30",
    isInvoked: true,
  },
  {
    dealerId: "DLR002",
    dealerName: "Patel Distributors",
    anchorName: "Reliance Industries",
    programName: "Vendor Financing",
    programCustId: "VF2023-045",
    overdueDays: 45,
    overdueAmount: 325000,
    fldgInvocationDays: 5,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR003",
    dealerName: "Singh Auto Parts",
    anchorName: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-089",
    overdueDays: 60,
    overdueAmount: 480000,
    fldgInvocationDays: 7,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR004",
    dealerName: "Agarwal Traders",
    anchorName: "HDFC Bank",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-078",
    overdueDays: 30,
    overdueAmount: 275000,
    fldgInvocationDays: 3,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR005",
    dealerName: "Mehta Enterprises",
    anchorName: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-112",
    overdueDays: 90,
    overdueAmount: 650000,
    fldgInvocationDays: 30,
    lastInvocation: "2023-11-01",
    isInvoked: true,
  },
  {
    dealerId: "DLR006",
    dealerName: "Gupta Hardware",
    anchorName: "Reliance Industries",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-156",
    overdueDays: 15,
    overdueAmount: 120000,
    fldgInvocationDays: 2,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR007",
    dealerName: "Joshi Electronics",
    anchorName: "HDFC Bank",
    programName: "Distributor Financing",
    programCustId: "DF2023-201",
    overdueDays: 55,
    overdueAmount: 780000,
    fldgInvocationDays: 10,
    lastInvocation: "2023-10-25",
    isInvoked: true,
  },
  {
    dealerId: "DLR008",
    dealerName: "Kumar Supplies",
    anchorName: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-245",
    overdueDays: 40,
    overdueAmount: 420000,
    fldgInvocationDays: 8,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR009",
    dealerName: "Reddy Motors",
    anchorName: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-298",
    overdueDays: 85,
    overdueAmount: 950000,
    fldgInvocationDays: 20,
    lastInvocation: "2023-11-05",
    isInvoked: true,
  },
  {
    dealerId: "DLR010",
    dealerName: "Choudhary Traders",
    anchorName: "Reliance Industries",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-312",
    overdueDays: 25,
    overdueAmount: 180000,
    fldgInvocationDays: 5,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR011",
    dealerName: "Iyer Electronics",
    anchorName: "HDFC Bank",
    programName: "Distributor Financing",
    programCustId: "DF2023-367",
    overdueDays: 70,
    overdueAmount: 560000,
    fldgInvocationDays: 12,
    lastInvocation: "2023-10-18",
    isInvoked: true,
  },
  {
    dealerId: "DLR012",
    dealerName: "Sharma Distributors",
    anchorName: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-389",
    overdueDays: 35,
    overdueAmount: 290000,
    fldgInvocationDays: 7,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR013",
    dealerName: "Patel Auto Parts",
    anchorName: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-425",
    overdueDays: 80,
    overdueAmount: 720000,
    fldgInvocationDays: 18,
    lastInvocation: "2023-11-03",
    isInvoked: true,
  },
  {
    dealerId: "DLR014",
    dealerName: "Verma Enterprises",
    anchorName: "Reliance Industries",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-467",
    overdueDays: 20,
    overdueAmount: 150000,
    fldgInvocationDays: 4,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR015",
    dealerName: "Mishra Traders",
    anchorName: "HDFC Bank",
    programName: "Distributor Financing",
    programCustId: "DF2023-512",
    overdueDays: 65,
    overdueAmount: 510000,
    fldgInvocationDays: 11,
    lastInvocation: "2023-10-20",
    isInvoked: true,
  },
  {
    dealerId: "DLR016",
    dealerName: "Bansal Electronics",
    anchorName: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-534",
    overdueDays: 30,
    overdueAmount: 240000,
    fldgInvocationDays: 6,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR017",
    dealerName: "Kapoor Supplies",
    anchorName: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-578",
    overdueDays: 75,
    overdueAmount: 680000,
    fldgInvocationDays: 15,
    lastInvocation: "2023-10-28",
    isInvoked: true,
  },
  {
    dealerId: "DLR018",
    dealerName: "Malhotra Traders",
    anchorName: "Reliance Industries",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-612",
    overdueDays: 15,
    overdueAmount: 130000,
    fldgInvocationDays: 3,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR019",
    dealerName: "Khanna Motors",
    anchorName: "HDFC Bank",
    programName: "Distributor Financing",
    programCustId: "DF2023-645",
    overdueDays: 60,
    overdueAmount: 490000,
    fldgInvocationDays: 9,
    lastInvocation: "2023-10-15",
    isInvoked: true,
  },
  {
    dealerId: "DLR020",
    dealerName: "Agarwal Enterprises",
    anchorName: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-678",
    overdueDays: 25,
    overdueAmount: 200000,
    fldgInvocationDays: 5,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR021",
    dealerName: "Desai Trading Co.",
    anchorName: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-712",
    overdueDays: 70,
    overdueAmount: 630000,
    fldgInvocationDays: 14,
    lastInvocation: "2023-10-22",
    isInvoked: true,
  },
  {
    dealerId: "DLR022",
    dealerName: "Bajaj Industries",
    anchorName: "Reliance Industries",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-745",
    overdueDays: 10,
    overdueAmount: 110000,
    fldgInvocationDays: 2,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR023",
    dealerName: "Menon Distributors",
    anchorName: "HDFC Bank",
    programName: "Distributor Financing",
    programCustId: "DF2023-789",
    overdueDays: 55,
    overdueAmount: 450000,
    fldgInvocationDays: 8,
    lastInvocation: "2023-10-10",
    isInvoked: true,
  },
  {
    dealerId: "DLR024",
    dealerName: "Saxena Enterprises",
    anchorName: "Tata Motors",
    programName: "Dealer Financing",
    programCustId: "DF2023-823",
    overdueDays: 20,
    overdueAmount: 180000,
    fldgInvocationDays: 4,
    lastInvocation: null,
    isInvoked: false,
  },
  {
    dealerId: "DLR025",
    dealerName: "Rao Technologies",
    anchorName: "State Bank of India",
    programName: "Vendor Financing",
    programCustId: "VF2023-867",
    overdueDays: 65,
    overdueAmount: 580000,
    fldgInvocationDays: 12,
    lastInvocation: "2023-11-07",
    isInvoked: true,
  },
  {
    dealerId: "DLR026",
    dealerName: "Nair Supplies",
    anchorName: "Reliance Industries",
    programName: "Supply Chain Finance",
    programCustId: "SCF2023-901",
    overdueDays: 5,
    overdueAmount: 90000,
    fldgInvocationDays: 1,
    lastInvocation: null,
    isInvoked: false,
  }
]
</file>

<file path="components/stop-supply-detail.tsx">
"use client"

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { AlertTriangle, CheckCircle, XCircle, FileText, Mail, Calendar, Download, ExternalLink } from "lucide-react"
import type { StopSupplyDealer } from "@/app/(dashboard)/stop-supply/page"
import { Progress } from "@/components/ui/progress"
import { Switch } from "@/components/ui/switch"
import { useState } from "react"
import { DatePicker } from "@/components/ui/date-picker"

export function StopSupplyDetail({ dealer }: { dealer: StopSupplyDealer }) {
  const [anchorConfirmation, setAnchorConfirmation] = useState(false)
  const [stopEmails, setStopEmails] = useState(false)
  const [confirmationDate, setConfirmationDate] = useState<Date | undefined>(undefined)
  const currentInvoice = dealer.history[0] // Most recent invoice

  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Dealer Information</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="grid grid-cols-2 gap-1 text-sm">
              <dt className="font-medium">Dealer ID:</dt>
              <dd>{dealer.id}</dd>

              <dt className="font-medium">Name:</dt>
              <dd>{dealer.name}</dd>

              <dt className="font-medium">Anchor:</dt>
              <dd>{dealer.anchor}</dd>

              <dt className="font-medium">Program Name:</dt>
              <dd>{dealer.programName}</dd>
              
              <dt className="font-medium">Program Cust ID:</dt>
              <dd>{dealer.programCustId}</dd>
            </dl>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">Stop Supply Status</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="grid grid-cols-2 gap-1 text-sm">
              <dt className="font-medium">Overdue Days:</dt>
              <dd>
                <Badge variant={dealer.overdueDays > 60 ? "destructive" : "outline"}>{dealer.overdueDays} days</Badge>
              </dd>

              <dt className="font-medium">Overdue Amount:</dt>
              <dd>₹ {dealer.overdueAmount.toLocaleString()}</dd>

              <dt className="font-medium">Stop Supply Duration:</dt>
              <dd>{dealer.stopSupplyDays} days</dd>

              <dt className="font-medium">Last Triggered:</dt>
              <dd>{dealer.lastTriggeredDate}</dd>
            </dl>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="current-thread" className="space-y-4">
        <TabsList>
          <TabsTrigger value="current-thread">
            <AlertTriangle className="h-4 w-4 mr-2" />
            Current Stop Supply Thread
          </TabsTrigger>
          <TabsTrigger value="history">
            <Calendar className="h-4 w-4 mr-2" />
            Stop Supply History
          </TabsTrigger>
          <TabsTrigger value="communications">
            <Mail className="h-4 w-4 mr-2" />
            Communications
          </TabsTrigger>
        </TabsList>

        <TabsContent value="current-thread" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Current Stop Supply Thread</CardTitle>
              <CardDescription>Manage the current stop supply process</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="border rounded-lg p-4">
                <h3 className="text-base font-semibold mb-4">Active Invoice Details</h3>
                <dl className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <dt className="font-medium text-muted-foreground">Invoice Number</dt>
                    <dd className="mt-1">{currentInvoice.invoiceNumber}</dd>
                  </div>
                  <div>
                    <dt className="font-medium text-muted-foreground">Overdue Amount</dt>
                    <dd className="mt-1">₹ {currentInvoice.overdueAmount.toLocaleString()}</dd>
                  </div>
                  <div>
                    <dt className="font-medium text-muted-foreground">Overdue Days</dt>
                    <dd className="mt-1">{currentInvoice.overdueDays} days</dd>
                  </div>
                  <div>
                    <dt className="font-medium text-muted-foreground">Emails Sent</dt>
                    <dd className="mt-1">{currentInvoice.emailsSent}</dd>
                  </div>
                </dl>
              </div>

              <div className="border rounded-lg p-4 space-y-4">
                <h3 className="text-base font-semibold">Stop Supply Controls</h3>
                
                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <h4 className="font-medium">Anchor Confirmation Received</h4>
                    <p className="text-sm text-muted-foreground">Mark if anchor has confirmed the stop supply</p>
                  </div>
                  <Switch 
                    checked={anchorConfirmation}
                    onCheckedChange={setAnchorConfirmation}
                  />
                </div>

                <div className={`space-y-2 ${anchorConfirmation ? "" : "opacity-50 pointer-events-none"}`}>
                  <h4 className="font-medium">Confirmation Date</h4>
                  <DatePicker
                    selected={confirmationDate}
                    onSelect={setConfirmationDate}
                    placeholder="Select confirmation date"
                    disabled={!anchorConfirmation}
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div className="space-y-0.5">
                    <h4 className="font-medium">Stop Sending Stop Supply Emails</h4>
                    <p className="text-sm text-muted-foreground">Pause the automated email notifications</p>
                  </div>
                  <Switch 
                    checked={stopEmails}
                    onCheckedChange={setStopEmails}
                  />
                </div>

                <div className="pt-4">
                  <Button className="w-full" variant="secondary">
                    Save Changes
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="history" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Stop Supply History</CardTitle>
              <CardDescription>Complete history of stop supply events for this dealer</CardDescription>
            </CardHeader>
            <CardContent className="p-0 overflow-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Invoice Number</TableHead>
                    <TableHead>Overdue Days</TableHead>
                    <TableHead>Overdue Amount</TableHead>
                    <TableHead>Triggered Date</TableHead>
                    <TableHead>Emails Sent</TableHead>
                    <TableHead>Anchor Confirmation</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {dealer.history.map((item, index) => (
                    <TableRow key={index}>
                      <TableCell className="font-medium">{item.invoiceNumber}</TableCell>
                      <TableCell>
                        <Badge variant={item.overdueDays > 60 ? "destructive" : "outline"}>
                          {item.overdueDays} days
                        </Badge>
                      </TableCell>
                      <TableCell>₹ {item.overdueAmount.toLocaleString()}</TableCell>
                      <TableCell>{item.triggeredDate}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <span>{item.emailsSent}</span>
                          <Progress value={(item.emailsSent / 5) * 100} className="h-2 w-16" />
                        </div>
                      </TableCell>
                      <TableCell>
                        {item.anchorConfirmation ? (
                          <div className="flex items-center gap-1 text-green-600">
                            <CheckCircle className="h-4 w-4" />
                            <span>Confirmed</span>
                          </div>
                        ) : (
                          <div className="flex items-center gap-1 text-amber-600">
                            <XCircle className="h-4 w-4" />
                            <span>Pending</span>
                          </div>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="communications" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Communication History</CardTitle>
              <CardDescription>Record of all communications related to stop supply</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {dealer.history.flatMap((item, historyIndex) =>
                Array.from({ length: item.emailsSent }).map((_, emailIndex) => (
                  <Card key={`${historyIndex}-${emailIndex}`} className="border border-muted">
                    <CardHeader className="p-4 pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle className="text-base">
                            Stop Supply Notification #{emailIndex + 1} - {item.invoiceNumber}
                          </CardTitle>
                          <CardDescription>
                            Sent on{" "}
                            {new Date(
                              new Date(item.triggeredDate).getTime() + emailIndex * 86400000,
                            ).toLocaleDateString()}
                          </CardDescription>
                        </div>
                        <Badge variant={emailIndex === 0 ? "default" : emailIndex < 3 ? "outline" : "destructive"}>
                          {emailIndex === 0 ? "Initial" : emailIndex < 3 ? "Reminder" : "Final Notice"}
                        </Badge>
                      </div>
                    </CardHeader>
                    <CardContent className="p-4 pt-2">
                      <p className="text-sm text-muted-foreground mb-2">
                        Email sent to {dealer.name} regarding overdue payment for invoice {item.invoiceNumber}.
                        {emailIndex > 0 && " This is a follow-up reminder."}
                      </p>
                      {item.anchorConfirmation && emailIndex === item.emailsSent - 1 && (
                        <div className="flex items-center gap-1 text-green-600">
                          <CheckCircle className="h-4 w-4" />
                          <span>Anchor Confirmed</span>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )),
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="flex justify-between">
        <Button variant="outline">Back to List</Button>
        <Button variant="default" className="gap-2">
          <CheckCircle className="h-4 w-4" />
          Lift Stop Supply
        </Button>
      </div>
    </div>
  )
}
</file>

<file path="app/(dashboard)/configuration/page.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Switch } from "@/components/ui/switch"
import { AlertOctagon, Shield, Lock, Copy, Plus, ChevronDown, ChevronUp } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"

interface StopSupplyRule {
  id: number
  createdDate: string
  isActive: boolean
  requireConfirmation: "yes" | "no"
  sendReminder: "yes" | "no"
  reminderDays: number
  emailsToSend: number
  amount: number
}

interface FLDGRule {
  id: number
  createdDate: string
  isActive: boolean
  minAmount: number
  sendPreEmail: "yes" | "no"
  sendPostEmail: "yes" | "no"
}

interface NewFLDGRule {
  minAmount: number
  sendPreEmail: "yes" | "no"
  sendPostEmail: "yes" | "no"
}

export default function ConfigurationPage() {
  const [isAddNewRuleOpen, setIsAddNewRuleOpen] = useState(false)
  const [isAddNewFLDGRuleOpen, setIsAddNewFLDGRuleOpen] = useState(false)
  const [newRulePreviewOpen, setNewRulePreviewOpen] = useState(false)
  const [totalRules] = useState(2)
  
  // Stop Supply Rules State
  const [rules, setRules] = useState<StopSupplyRule[]>([
    {
      id: 1,
      createdDate: "2024-06-01 10:30 AM",
      isActive: true,
      requireConfirmation: "yes",
      sendReminder: "yes",
      reminderDays: 7,
      emailsToSend: 3,
      amount: 50000
    },
    {
      id: 2,
      createdDate: "2024-06-02 09:15 AM",
      isActive: false,
      requireConfirmation: "no",
      sendReminder: "no",
      reminderDays: 0,
      emailsToSend: 0,
      amount: 0
    }
  ])

  // FLDG Rules State
  const [fldgRules, setFldgRules] = useState<FLDGRule[]>([
    {
      id: 1,
      createdDate: "2024-06-01 10:30 AM",
      isActive: true,
      minAmount: 100000,
      sendPreEmail: "yes",
      sendPostEmail: "yes"
    },
    {
      id: 2,
      createdDate: "2024-06-02 09:15 AM",
      isActive: false,
      minAmount: 500000,
      sendPreEmail: "no",
      sendPostEmail: "yes"
    }
  ])

  // New FLDG Rule State
  const [newFldgRule, setNewFldgRule] = useState<NewFLDGRule>({
    minAmount: 0,
    sendPreEmail: "yes",
    sendPostEmail: "yes"
  })

  return (
    <div className="flex flex-col gap-4">
      <div>
        <h1 className="text-2xl md:text-3xl font-bold tracking-tight">Configuration</h1>
        <p className="text-muted-foreground">Manage system settings and configurations</p>
      </div>

      <Tabs defaultValue="stop-supply" className="space-y-4">
        <TabsList>
          <TabsTrigger value="stop-supply">
            <AlertOctagon className="h-4 w-4 mr-2" />
            Stop Supply Rules
          </TabsTrigger>
          <TabsTrigger value="fldg">
            <Shield className="h-4 w-4 mr-2" />
            FLDG Rules
          </TabsTrigger>
        </TabsList>

        <TabsContent value="stop-supply" className="space-y-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>Stop Supply Rules Configuration</CardTitle>
                <CardDescription>Configure rules for stop supply process</CardDescription>
              </div>
              <Button 
                onClick={() => setIsAddNewRuleOpen(true)}
                className="gap-1"
              >
                <Plus className="h-4 w-4" />
                Add New Rule
              </Button>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-sm text-muted-foreground">
                Total Rules: {totalRules}
              </div>
              
              <div className="space-y-6">
                {rules.map((rule) => (
                  <Card key={rule.id} className="border-2 border-muted">
                    <CardHeader className="pb-2 flex flex-row items-center justify-between">
                      <div className="flex items-center gap-2">
                        <h3 className="text-base font-medium">Rule {rule.id} (Created: {rule.createdDate})</h3>
                        <Lock className="h-4 w-4 text-muted-foreground" />
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={rule.isActive ? "default" : "outline"} className="gap-1">
                          {rule.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                        <Switch 
                          checked={rule.isActive} 
                          onCheckedChange={(checked) => {
                            setRules(rules.map(r => r.id === rule.id ? {...r, isActive: checked} : r))
                          }}
                        />
                      </div>
                    </CardHeader>
                    <CardContent className="py-2">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                          <div className="space-y-2">
                            <Label>Require Anchor Confirmation Applying Stop Supply</Label>
                            <div className="flex gap-2">
                              <Switch 
                                checked={rule.requireConfirmation === "yes"} 
                                onCheckedChange={(checked) => {
                                  const newValue: "yes" | "no" = checked ? "yes" : "no";
                                  setRules(rules.map(r => r.id === rule.id ? {...r, requireConfirmation: newValue} : r))
                                }}
                              />
                              <span className="text-sm">{rule.requireConfirmation === "yes" ? 'Yes' : 'No'}</span>
                            </div>
                          </div>

                          <div className="space-y-2">
                            <Label>Send Reminder Email to Anchor</Label>
                            <div className="flex gap-2">
                              <Switch 
                                checked={rule.sendReminder === "yes"} 
                                onCheckedChange={(checked) => {
                                  const newValue: "yes" | "no" = checked ? "yes" : "no";
                                  setRules(rules.map(r => r.id === rule.id ? {...r, sendReminder: newValue} : r))
                                }}
                              />
                              <span className="text-sm">{rule.sendReminder === "yes" ? 'Yes' : 'No'}</span>
                            </div>
                          </div>
                        </div>

                        <div className="space-y-4">
                          <div className="space-y-2">
                            <Label>Working Days After Last Email to Send Reminder Email</Label>
                            {rule.reminderDays !== 0 ? (
                              <Input 
                                type="number" 
                                value={rule.reminderDays} 
                                onChange={(e) => {
                                  setRules(rules.map(r => r.id === rule.id ? {...r, reminderDays: parseInt(e.target.value)} : r))
                                }}
                                min="1"
                                disabled={rule.sendReminder === "no"}
                              />
                            ) : (
                              <div className="h-10 px-3 py-2 border border-input rounded-md text-sm text-muted-foreground">
                                Not Set
                              </div>
                            )}
                          </div>

                          <div className="space-y-2">
                            <Label>Number of Emails (Including Reminders) to be Sent for Stop Supply</Label>
                            {rule.emailsToSend !== 0 ? (
                              <Input 
                                type="number" 
                                value={rule.emailsToSend} 
                                onChange={(e) => {
                                  setRules(rules.map(r => r.id === rule.id ? {...r, emailsToSend: parseInt(e.target.value)} : r))
                                }}
                                min="1"
                              />
                            ) : (
                              <div className="h-10 px-3 py-2 border border-input rounded-md text-sm text-muted-foreground">
                                Not Set
                              </div>
                            )}
                          </div>

                          <div className="space-y-2">
                            <Label>Amount</Label>
                            <Input 
                              type="number" 
                              value={rule.amount} 
                              onChange={(e) => {
                                setRules(rules.map(r => r.id === rule.id ? {...r, amount: parseInt(e.target.value)} : r))
                              }}
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
            <CardFooter>
              <Button>Save Changes</Button>
            </CardFooter>
          </Card>
        </TabsContent>

        <TabsContent value="fldg" className="space-y-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div>
                <CardTitle>FLDG Rules Configuration</CardTitle>
                <CardDescription>Configure FLDG rules based on amount thresholds</CardDescription>
              </div>
              <Button 
                onClick={() => setIsAddNewFLDGRuleOpen(true)}
                className="gap-1"
              >
                <Plus className="h-4 w-4" />
                Add New Rule
              </Button>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="text-sm text-muted-foreground">
                Total Rules: {fldgRules.length}
              </div>
              
              <div className="space-y-6">
                {fldgRules.map((rule) => (
                  <Card key={rule.id} className="border-2 border-muted">
                    <CardHeader className="pb-2 flex flex-row items-center justify-between">
                      <div className="flex items-center gap-2">
                        <h3 className="text-base font-medium">Rule {rule.id} (Created: {rule.createdDate})</h3>
                        <Lock className="h-4 w-4 text-muted-foreground" />
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={rule.isActive ? "default" : "outline"} className="gap-1">
                          {rule.isActive ? 'Active' : 'Inactive'}
                        </Badge>
                        <Switch 
                          checked={rule.isActive} 
                          onCheckedChange={(checked) => {
                            setFldgRules(fldgRules.map(r => r.id === rule.id ? {...r, isActive: checked} : r))
                          }}
                        />
                      </div>
                    </CardHeader>
                    <CardContent className="py-2">
                      <div className="grid gap-6">
                        <div className="space-y-2">
                          <Label>Minimum FLDG Invocation Amount (Per Dealer)</Label>
                          <Input 
                            type="number" 
                            value={rule.minAmount}
                            onChange={(e) => {
                              setFldgRules(fldgRules.map(r => r.id === rule.id ? {...r, minAmount: parseInt(e.target.value)} : r))
                            }}
                          />
                        </div>

                        <div className="space-y-2">
                          <Label>Send Email to Anchor before FLDG Invocation</Label>
                          <RadioGroup 
                            value={rule.sendPreEmail}
                            onValueChange={(value: "yes" | "no") => {
                              setFldgRules(fldgRules.map(r => r.id === rule.id ? {...r, sendPreEmail: value} : r))
                            }}
                            className="flex gap-6"
                          >
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="yes" id={`pre-yes-${rule.id}`} />
                              <Label htmlFor={`pre-yes-${rule.id}`}>Yes</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="no" id={`pre-no-${rule.id}`} />
                              <Label htmlFor={`pre-no-${rule.id}`}>No</Label>
                            </div>
                          </RadioGroup>
                        </div>

                        <div className="space-y-2">
                          <Label>Send Email after FLDG Invocation</Label>
                          <RadioGroup 
                            value={rule.sendPostEmail}
                            onValueChange={(value: "yes" | "no") => {
                              setFldgRules(fldgRules.map(r => r.id === rule.id ? {...r, sendPostEmail: value} : r))
                            }}
                            className="flex gap-6"
                          >
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="yes" id={`post-yes-${rule.id}`} />
                              <Label htmlFor={`post-yes-${rule.id}`}>Yes</Label>
                            </div>
                            <div className="flex items-center space-x-2">
                              <RadioGroupItem value="no" id={`post-no-${rule.id}`} />
                              <Label htmlFor={`post-no-${rule.id}`}>No</Label>
                            </div>
                          </RadioGroup>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
            <CardFooter>
              <Button>Save Changes</Button>
            </CardFooter>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Add New Rule Dialog */}
      <Dialog open={isAddNewRuleOpen} onOpenChange={setIsAddNewRuleOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Add New Stop Supply Rule</DialogTitle>
            <DialogDescription>
              Configure parameters for the new rule
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-6 py-4">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Require Anchor Confirmation Applying Stop Supply</Label>
                <div className="flex gap-2">
                  <Switch 
                    checked={rules[0].requireConfirmation === "yes"} 
                    onCheckedChange={(checked) => {
                      const newValue: "yes" | "no" = checked ? "yes" : "no";
                      setRules(rules.map(r => r.id === 1 ? {...r, requireConfirmation: newValue} : r))
                    }}
                  />
                  <span className="text-sm">{rules[0].requireConfirmation === "yes" ? 'Yes' : 'No'}</span>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label>Send Reminder Email to Anchor</Label>
                <div className="flex gap-2">
                  <Switch 
                    checked={rules[0].sendReminder === "yes"} 
                    onCheckedChange={(checked) => {
                      const newValue: "yes" | "no" = checked ? "yes" : "no";
                      setRules(rules.map(r => r.id === 1 ? {...r, sendReminder: newValue} : r))
                    }}
                  />
                  <span className="text-sm">{rules[0].sendReminder === "yes" ? 'Yes' : 'No'}</span>
                </div>
              </div>
              
              <div className="space-y-2">
                <Label>Working Days After Last Email to Send Reminder Email</Label>
                <Input 
                  type="number" 
                  value={rules[0].reminderDays} 
                  onChange={(e) => {
                    setRules(rules.map(r => r.id === 1 ? {...r, reminderDays: parseInt(e.target.value)} : r))
                  }}
                  min="1"
                  disabled={rules[0].sendReminder === "no"}
                />
              </div>
              
              <div className="space-y-2">
                <Label>Number of Emails (Including Reminders) to be Sent for Stop Supply</Label>
                <Input 
                  type="number" 
                  value={rules[0].emailsToSend} 
                  onChange={(e) => {
                    setRules(rules.map(r => r.id === 1 ? {...r, emailsToSend: parseInt(e.target.value)} : r))
                  }}
                  min="1"
                />
              </div>

              <div className="space-y-2">
                <Label>Amount</Label>
                <Input 
                  type="number" 
                  value={rules[0].amount} 
                  onChange={(e) => {
                    setRules(rules.map(r => r.id === 1 ? {...r, amount: parseInt(e.target.value)} : r))
                  }}
                  min="0"
                />
              </div>
              
              <div className="pt-2">
                <Collapsible 
                  open={newRulePreviewOpen} 
                  onOpenChange={setNewRulePreviewOpen}
                  className="border rounded-md"
                >
                  <CollapsibleTrigger asChild>
                    <Button variant="outline" className="w-full flex justify-between">
                      Preview Impact
                      {newRulePreviewOpen ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
                    </Button>
                  </CollapsibleTrigger>
                  <CollapsibleContent className="p-4">
                    <div className="space-y-2">
                      <h4 className="font-medium">Hypothetical Example</h4>
                      <div className="bg-muted/40 p-3 rounded-md text-sm">
                        <p><strong>Scenario:</strong> Dealer with 30 days overdue payment</p>
                        <div className="mt-2">
                          <p><strong>With this rule:</strong></p>
                          <ul className="list-disc pl-5 space-y-1 mt-1">
                            <li>{rules[0].requireConfirmation === "yes" ? 'Anchor confirmation will be required' : 'No anchor confirmation required'}</li>
                            <li>{rules[0].sendReminder === "yes" ? `Reminder email will be sent ${rules[0].reminderDays} days after initial email` : 'No reminder emails will be sent'}</li>
                            <li>Total of {rules[0].emailsToSend} email(s) will be sent</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </CollapsibleContent>
                </Collapsible>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddNewRuleOpen(false)}>Cancel</Button>
            <Button onClick={() => {
              const newRuleData = {
                id: rules.length + 1,
                createdDate: new Date().toLocaleString('en-US', {
                  year: 'numeric',
                  month: '2-digit',
                  day: '2-digit',
                  hour: '2-digit',
                  minute: '2-digit',
                  hour12: true
                }),
                isActive: true,
                requireConfirmation: rules[0].requireConfirmation,
                sendReminder: rules[0].sendReminder,
                reminderDays: rules[0].sendReminder ? rules[0].reminderDays : 0,
                emailsToSend: rules[0].emailsToSend,
                amount: rules[0].amount
              }
              setRules([...rules, newRuleData])
              setIsAddNewRuleOpen(false)
            }}>Save</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add New FLDG Rule Dialog */}
      <Dialog open={isAddNewFLDGRuleOpen} onOpenChange={setIsAddNewFLDGRuleOpen}>
        <DialogContent className="sm:max-w-[600px]">
          <DialogHeader>
            <DialogTitle>Add New FLDG Rule</DialogTitle>
            <DialogDescription>
              Configure parameters for the new FLDG rule (Priority: {fldgRules.length + 1})
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid gap-6 py-4">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Minimum FLDG Invocation Amount (Per Dealer)</Label>
                <Input 
                  type="number" 
                  value={newFldgRule.minAmount}
                  onChange={(e) => setNewFldgRule({...newFldgRule, minAmount: parseInt(e.target.value)})}
                />
              </div>
              <div className="space-y-2">
                <Label>Send Email to Anchor before FLDG Invocation</Label>
                <RadioGroup 
                  value={newFldgRule.sendPreEmail}
                  onValueChange={(value: "yes" | "no") => setNewFldgRule({...newFldgRule, sendPreEmail: value})}
                  className="flex gap-6"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="yes" id="new-pre-yes" />
                    <Label htmlFor="new-pre-yes">Yes</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="no" id="new-pre-no" />
                    <Label htmlFor="new-pre-no">No</Label>
                  </div>
                </RadioGroup>
              </div>
              <div className="space-y-2">
                <Label>Send Email after FLDG Invocation</Label>
                <RadioGroup 
                  value={newFldgRule.sendPostEmail}
                  onValueChange={(value: "yes" | "no") => setNewFldgRule({...newFldgRule, sendPostEmail: value})}
                  className="flex gap-6"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="yes" id="new-post-yes" />
                    <Label htmlFor="new-post-yes">Yes</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="no" id="new-post-no" />
                    <Label htmlFor="new-post-no">No</Label>
                  </div>
                </RadioGroup>
              </div>
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsAddNewFLDGRuleOpen(false)}>Cancel</Button>
            <Button onClick={() => {
              const newRuleData: FLDGRule = {
                id: fldgRules.length + 1,
                createdDate: new Date().toLocaleString('en-US', {
                  year: 'numeric',
                  month: '2-digit',
                  day: '2-digit',
                  hour: '2-digit',
                  minute: '2-digit',
                  hour12: true
                }),
                isActive: true,
                minAmount: newFldgRule.minAmount,
                sendPreEmail: newFldgRule.sendPreEmail,
                sendPostEmail: newFldgRule.sendPostEmail
              }
              setFldgRules([...fldgRules, newRuleData])
              setIsAddNewFLDGRuleOpen(false)
            }}>Save</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

</files>
